# using DifferentialEquations, DiffEqFlux, Plots, Statistics
# using XLSX, DataFrames, Optim, BlackBoxOptim,DiffEqParamEstim, CSV, Tables
# using Flux
# using BSON: @save
# using BSON#: @load
# using OrdinaryDiffEq, Optimization, OptimizationOptimJL, OptimizationOptimisers
# using Random, ComponentArrays, Lux

# using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL
# using OptimizationOptimisers, Random, Plots, DifferentialEquations

using Flux, DiffEqFlux, DifferentialEquations, Plots

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end
tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]


sol_SP4_trainingset3=[2.0e9 2.0e8 100.0 25.0 0.0 0.31 80.6; 2.6238399006853924e9 1.1307401714161992e9 87.77073225313393 22.80166219707381 13.686482816188217 2.9987639413029443 152.14626807249508; 2.7258933971506186e9 2.8656247212789416e9 72.04487964715874 19.397765675499105 23.73684410609851 5.473929859858787 1096.127376140359; 3.4174029260441923e9 3.6153695133053446e9 73.8191442775968 16.06276133862345 36.177515783714796 6.6665916674781975 759.7774359257958; 3.5005257750071692e9 4.2515905786275682e9 68.54452098474782 12.869752183144376 45.410482016235036 8.072896420640213 1207.9466259668748; 3.734061586380202e9 6.030576801951885e9 65.97798669397969 11.697588903613347 57.08923089130549 8.584823634384042 1503.823819514144; 3.9843740973885384e9 4.814602698358773e9 52.05192519298281 8.561171757570895 50.20598313861654 11.17366146027026 1712.4381875136755; 3.877564622986018e9 4.937486683329407e9 41.031196198800316 6.188712896872375 70.0281044154406 10.823113151976207 2350.496560198175; 3.5628733838521037e9 5.824185151460114e9 36.6422960646829 4.133446700725102 77.31687053399895 14.205754579245461 2752.716999825793; 3.215714639263022e9 5.710549080329425e9 31.061188304135488 3.2017127965819916 89.33923694561082 11.996267453717167 3024.237472298456; 3.4462523861285114e9 5.493013487940109e9 23.142207361339896 4.410032630293085 101.07471815232327 14.095871129344015 3442.9133967132616; 2.8796723141526737e9 5.211713305775382e9 22.03719504364738 2.355259146484377 116.02703445912327 13.695555567468318 3666.1166433638514; 2.691848546385854e9 5.07714895228045e9 20.129457225188844 0.2846117596933731 117.10835782990486 15.467042557711439 4088.224541809423; 3.2045856207234626e9 4.481171668727927e9 19.696679900588986 0.25927525860231254 124.32540101966985 15.141759698474527 4473.298515353057; 2.3945623963839426e9 4.92971462816266e9 12.886720420986594 0.8004119236088029 131.19220636237335 16.139256573227335 4394.772628028504]'

trainingset=sol_SP4_trainingset3

full_path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/estimating_parameters/SP4/estimation_with_trainingset3"

all_estimated_parameters=Array[]
all_initial_condition=Array[]

for t = 1:14
    p=zeros(6)

    tstart=tgrid_opt[t]
    tend=tgrid_opt[t+1]
    u0=[trainingset[:,t][1];trainingset[:,t][3:end]]
    push!(all_initial_condition, [u0;tstart])

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    function loss_func()
      sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, save_everystep=false, save_start=false)#, maxiters=1e7)
      l=Flux.Losses.mse(sol[1,1],trainingset[:,t+1][1])+
      Flux.Losses.mse(sol[2,1],trainingset[:,t+1][3])+
      Flux.Losses.mse(sol[3,1],trainingset[:,t+1][4])+
      Flux.Losses.mse(sol[4,1],trainingset[:,t+1][5])+
      Flux.Losses.mse(sol[5,1],trainingset[:,t+1][6])+
      Flux.Losses.mse(sol[6,1],trainingset[:,t+1][7])
      return l
    end

    epochs = 600
    learning_rate = 0.05
    data = Iterators.repeated((), epochs)
    opt = Adam(learning_rate)
    counter=0

    callback_func = function ()
      global counter=counter+1
      # println("loss: ", loss_func(), "    epoch: ",counter)
    end

    fparams = Flux.params(p)
    Flux.train!(loss_func, fparams, data, opt, cb=callback_func)

    # p = round.(p;digits=4)
    push!(all_estimated_parameters, p)
    println("\n\nParameters estimated: ", p)
    println("loss: ", loss_func(), "    epoch: ",counter, "    t=", t)

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, saveat = tgrid)

    plots=plot(sol.t,sol', title="from t"*string(t)*" to t"*string(t+1), idxs = (1,2,3,4,5,6), color=[:blue :yellow :orange :green :lightgreen :purple ], label = ["Prediction" "Prediction" "Prediction" "Prediction" "Prediction" "Prediction"], ylabel=["[Xv]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,2),size = (800, 600))
    Plots.scatter!([tgrid_opt[t]],[trainingset[:,t][1];trainingset[:,t][3:end]]' , color=:red,   labels = false, layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    Plots.scatter!([tgrid_opt[t+1]],[trainingset[:,t+1][1];trainingset[:,t+1][3:end]]' , color=:red,   labels = "Observed values", layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    display(plots)
    savefig(full_path*"/from t"*string(t)*" to t"*string(t+1))

end





println("\n\n all_estimated_parameters ")
# all_estimated_parameters = hcat(all_estimated_parameters...)'
display(all_estimated_parameters)
println("\n\n all_initial_condition")
# all_initial_condition = hcat(all_initial_condition...)'
display(all_initial_condition)

# # #
# 14-element Vector{Array}:
#  [0.03878452501110052, 7.602999598220124e-10, 1.3667063943513747e-10, 8.508959512622578e-10, 1.6716074564514368e-10, 4.448075750022642e-9]
#  [0.0054510529695192475, 8.399764220640584e-10, 1.8181538269723504e-10, 5.368275358066532e-10, 1.3220846194635582e-10, 5.042150710987093e-8]
#  [0.03229780822163887, -8.286778516824965e-11, 1.5576406441863172e-10, 5.810555249317957e-10, 5.57033056524601e-11, -1.5709638717673814e-8]
#  [0.003433184913255911, 2.178542436876591e-10, 1.318782895325863e-10, 3.8134386695723485e-10, 5.808285692836412e-11, 1.851052543700871e-8]
#  [0.009226194249430322, 1.0139557245635871e-10, 4.630878414012137e-11, 4.613877351249302e-10, 2.0225134880590656e-11, 1.1689087848864291e-8]
#  [0.00926909955294144, 5.156841950199986e-10, 1.1614248908048159e-10, -2.548880346422806e-10, 9.586556719918122e-11, 7.725013394937703e-9]
#  [-0.003881850454857153, 4.00534914182188e-10, 8.622486314291463e-11, 7.204099891827995e-10, -1.2741172287495129e-11, 2.3189396819499837e-8]
#  [-0.01209141892488347, 1.686338710090627e-10, 7.896837654228071e-11, 2.80055766770686e-10, 1.2997027298583274e-10, 1.5454562449076617e-8]
#  [-0.01464539054340075, 2.354464444560018e-10, 3.930592669707637e-11, 5.071801973996757e-10, -9.320978260348144e-11, 1.1454480726946317e-8]
#  [0.009891108561704016, 3.3976004515236234e-10, -5.184243316579339e-11, 5.035051105447298e-10, 9.008252772506221e-11, 1.796308453568049e-8]
#  [-0.02565869545006702, 5.004174037301233e-11, 9.30535470298721e-11, 6.771441984928867e-10, -1.812815862818617e-11, 1.0108198100903818e-8]
#  [-0.009635479756658056, 9.786740307132295e-11, 1.0622476841715209e-10, 5.547181184237224e-11, 9.087764819244356e-11, 2.1654405160080115e-8]
#  [0.02490780584341999, 2.1022765495307478e-11, 1.2300541180784452e-12, 3.5058968276986587e-10, -1.5800885887722537e-11, 1.8706170991421965e-8]
#  [-0.04162604227033489, 3.4995589709929073e-10, -2.7809228163418292e-11, 3.5287713223105595e-10, 5.1260987090525386e-11, -4.035344358088108e-9]
#
#
#  all_initial_condition
# 14-element Vector{Array}:
#  [2.0e9, 100.0, 25.0, 0.0, 0.31, 80.6, 0.0]
#  [2.6238399006853924e9, 87.77073225313393, 22.80166219707381, 13.686482816188217, 2.9987639413029443, 152.14626807249508, 7.0]
#  [2.7258933971506186e9, 72.04487964715874, 19.397765675499105, 23.73684410609851, 5.473929859858787, 1096.127376140359, 14.0]
#  [3.4174029260441923e9, 73.8191442775968, 16.06276133862345, 36.177515783714796, 6.6665916674781975, 759.7774359257958, 21.0]
#  [3.5005257750071692e9, 68.54452098474782, 12.869752183144376, 45.410482016235036, 8.072896420640213, 1207.9466259668748, 28.0]
#  [3.734061586380202e9, 65.97798669397969, 11.697588903613347, 57.08923089130549, 8.584823634384042, 1503.823819514144, 35.0]
#  [3.9843740973885384e9, 52.05192519298281, 8.561171757570895, 50.20598313861654, 11.17366146027026, 1712.4381875136755, 42.0]
#  [3.877564622986018e9, 41.031196198800316, 6.188712896872375, 70.0281044154406, 10.823113151976207, 2350.496560198175, 49.0]
#  [3.5628733838521037e9, 36.6422960646829, 4.133446700725102, 77.31687053399895, 14.205754579245461, 2752.716999825793, 56.0]
#  [3.215714639263022e9, 31.061188304135488, 3.2017127965819916, 89.33923694561082, 11.996267453717167, 3024.237472298456, 63.0]
#  [3.4462523861285114e9, 23.142207361339896, 4.410032630293085, 101.07471815232327, 14.095871129344015, 3442.9133967132616, 70.0]
#  [2.8796723141526737e9, 22.03719504364738, 2.355259146484377, 116.02703445912327, 13.695555567468318, 3666.1166433638514, 77.0]
#  [2.691848546385854e9, 20.129457225188844, 0.2846117596933731, 117.10835782990486, 15.467042557711439, 4088.224541809423, 84.0]
#  [3.2045856207234626e9, 19.696679900588986, 0.25927525860231254, 124.32540101966985, 15.141759698474527, 4473.298515353057, 91.0]
