# using DifferentialEquations, DiffEqFlux, Plots, Statistics
# using XLSX, DataFrames, Optim, BlackBoxOptim,DiffEqParamEstim, CSV, Tables
# using Flux
# using BSON: @save
# using BSON#: @load
# using OrdinaryDiffEq, Optimization, OptimizationOptimJL, OptimizationOptimisers
# using Random, ComponentArrays, Lux

# using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL
# using OptimizationOptimisers, Random, Plots, DifferentialEquations

using Flux, DiffEqFlux, DifferentialEquations, Plots

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end
tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]


sol_SP4_trainingset2=[1.8951165199028962e9 4.5113534317312014e8 91.65061191783062 25.078825296718655 1.600601257695995 2.619215608144013 230.32805131597414; 2.337813236878404e9 1.7703299705619063e9 96.46036888910608 20.610347882910087 11.815149070313854 1.214505020287215 94.83903035273875; 2.9163860814725757e9 2.793685337570951e9 89.55838475067743 19.622608344850537 21.429945017589592 6.330296355184623 520.2834201433526; 3.369146462956877e9 3.474035213645697e9 78.92522191665624 16.700133011530987 35.95393772789649 7.188348501402588 1139.483860253433; 3.233888604472944e9 5.022207860058435e9 71.8762388946449 12.547590640960527 36.474533381005294 8.01412708278206 1126.7666249597623; 3.884416756257951e9 5.044103586235454e9 61.758588702455015 12.035083806104293 54.68044454823911 10.208356974850183 2006.1588714495401; 3.6333474517757277e9 4.547845636328813e9 42.33897010225701 9.642498115077142 65.1994545798047 10.906863748951734 1514.285935780923; 3.7477836041307807e9 5.635031190444473e9 45.38558042955183 7.688138842033874 80.09402187327835 11.808454941688275 2395.7293180992015; 3.501725941635261e9 5.4045747957798815e9 43.07581244322679 4.365261021908197 84.9891852718344 13.514839858686557 2769.9915712207967; 3.2354786487459025e9 4.930652152704306e9 35.658065186268814 3.19818603374201 102.5854664778529 14.217920649458717 3294.00254803766; 3.516692330408538e9 5.541546904302915e9 23.8151852275816 2.051641409772329 102.77721008364587 12.729268431144531 3440.3870984565206; 2.9756842133021317e9 5.463556776746271e9 14.64955830279397 0.7328241150615329 105.8753532956429 14.738450457211016 3878.398801864298; 2.9832548316347604e9 4.545563899613874e9 12.658864011323944 1.0714184172449406 110.00120770424469 15.565786171937585 4318.107709220469; 2.8152142955411887e9 3.903411841278471e9 14.073627947322825 0.2865675550595806 118.93793028428291 16.566031188582603 4632.744925522347; 2.6534203814661345e9 3.4848196081439056e9 14.09632220585732 0.9150905087906828 122.98775895145884 15.711712844462877 4543.788653341058]'

trainingset=sol_SP4_trainingset2

full_path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/estimating_parameters/SP4/estimation_with_trainingset2"


all_estimated_parameters=Array[]
all_initial_condition=Array[]

for t = 1:14
    p=zeros(6)

    tstart=tgrid_opt[t]
    tend=tgrid_opt[t+1]
    u0=[trainingset[:,t][1];trainingset[:,t][3:end]]
    push!(all_initial_condition, [u0;tstart])

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    function loss_func()
      sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, save_everystep=false, save_start=false)#, maxiters=1e7)
      l=Flux.Losses.mse(sol[1,1],trainingset[:,t+1][1])+
      Flux.Losses.mse(sol[2,1],trainingset[:,t+1][3])+
      Flux.Losses.mse(sol[3,1],trainingset[:,t+1][4])+
      Flux.Losses.mse(sol[4,1],trainingset[:,t+1][5])+
      Flux.Losses.mse(sol[5,1],trainingset[:,t+1][6])+
      Flux.Losses.mse(sol[6,1],trainingset[:,t+1][7])
      return l
    end

    epochs = 600
    learning_rate = 0.05
    data = Iterators.repeated((), epochs)
    opt = Adam(learning_rate)
    counter=0

    callback_func = function ()
      global counter=counter+1
      # println("loss: ", loss_func(), "    epoch: ",counter)
    end

    fparams = Flux.params(p)
    Flux.train!(loss_func, fparams, data, opt, cb=callback_func)

    # p = round.(p;digits=4)
    push!(all_estimated_parameters, p)
    println("\n\nParameters estimated: ", p)
    println("loss: ", loss_func(), "    epoch: ",counter, "    t=", t)

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, saveat = tgrid)

    plots=plot(sol.t,sol', title="from t"*string(t)*" to t"*string(t+1), idxs = (1,2,3,4,5,6), color=[:blue :yellow :orange :green :lightgreen :purple ], label = ["Prediction" "Prediction" "Prediction" "Prediction" "Prediction" "Prediction"], ylabel=["[Xv]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,2),size = (800, 600))
    Plots.scatter!([tgrid_opt[t]],[trainingset[:,t][1];trainingset[:,t][3:end]]' , color=:red,   labels = false, layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    Plots.scatter!([tgrid_opt[t+1]],[trainingset[:,t+1][1];trainingset[:,t+1][3:end]]' , color=:red,   labels = "Observed values", layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    display(plots)
    savefig(full_path*"/from t"*string(t)*" to t"*string(t+1))

end





println("\n\n all_estimated_parameters ")
# all_estimated_parameters = hcat(all_estimated_parameters...)'
display(all_estimated_parameters)
println("\n\n all_initial_condition")
# all_initial_condition = hcat(all_initial_condition...)'
display(all_initial_condition)

# # #
# all_estimated_parameters
# 14-element Vector{Array}:
# [0.029990807636835724, -3.2584046219196386e-10, 3.027202330016035e-10, 6.919919067885775e-10, -9.516314482558849e-11, -9.178801232380467e-9]
# [0.03158988972013028, 3.7684467471181747e-10, 5.392883714926774e-11, 5.249633198805979e-10, 2.793191267890128e-10, 2.3229124316339392e-8]
# [0.02061631867618959, 4.841782632623553e-10, 1.3307424173836716e-10, 6.613461249485249e-10, 3.907130321274573e-11, 2.819512082189735e-8]
# [-0.00585344596555193, 3.0505446605267696e-10, 1.7970752476747752e-10, 2.2530676790924318e-11, 3.573783384838323e-11, -5.503548778984722e-10]
# [0.026183932849257133, 4.072386643840964e-10, 2.0629064188757805e-11, 7.327933412385337e-10, 8.831886897356146e-11, 3.539577466348306e-8]
# [-0.009545494155902163, 7.383207356742299e-10, 9.09638496359624e-11, 3.999252983968386e-10, 2.655605420770771e-11, -1.870069326219543e-8]
# [0.0044300342831754035, -1.1793967166067423e-10, 7.565662109818216e-11, 5.765959132940966e-10, 3.490202919651647e-11, 3.412229698443478e-8]
# [-0.00970123617456608, 9.106567572738311e-11, 1.3100923070121884e-10, 1.929992275814178e-10, 6.727628587463662e-11, 1.4755916456929951e-8]
# [-0.011297013813804413, 3.147376355538175e-10, 4.9518296795025083e-11, 7.466182281393533e-10, 2.983077696852996e-11, 2.223406228727338e-8]
# [0.01190628464828946, 5.014133747613905e-10, 4.854204775002518e-11, 8.11680016732913e-12, -6.302651512910966e-11, 6.197762912519563e-9]
# [-0.023863838424489227, 4.042938924215496e-10, 5.8171549264092345e-11, 1.3665751805468018e-10, 8.862349976563138e-11, 1.932067084608556e-8]
# [0.00036298994783566334, 9.544753989896426e-11, -1.6233972052580386e-11, 1.9782248808496575e-10, 3.966775408325647e-11, 2.10828100440114e-8]
# [-0.008282363551087265, -6.973074029726076e-11, 3.868365365798264e-11, 4.404722146799443e-10, 4.9299977168490636e-11, 1.5507804690877562e-8]
# [-0.008455552465965856, -1.1859312459675596e-12, -3.2847297169441265e-11, 2.1164901618391724e-10, -4.464764689801852e-11, -4.648966031167431e-9]
#
#
# all_initial_condition
# 14-element Vector{Array}:
# [1.8951165199028962e9, 91.65061191783062, 25.078825296718655, 1.600601257695995, 2.619215608144013, 230.32805131597414, 0.0]
# [2.337813236878404e9, 96.46036888910608, 20.610347882910087, 11.815149070313854, 1.214505020287215, 94.83903035273875, 7.0]
# [2.9163860814725757e9, 89.55838475067743, 19.622608344850537, 21.429945017589592, 6.330296355184623, 520.2834201433526, 14.0]
# [3.369146462956877e9, 78.92522191665624, 16.700133011530987, 35.95393772789649, 7.188348501402588, 1139.483860253433, 21.0]
# [3.233888604472944e9, 71.8762388946449, 12.547590640960527, 36.474533381005294, 8.01412708278206, 1126.7666249597623, 28.0]
# [3.884416756257951e9, 61.758588702455015, 12.035083806104293, 54.68044454823911, 10.208356974850183, 2006.1588714495401, 35.0]
# [3.6333474517757277e9, 42.33897010225701, 9.642498115077142, 65.1994545798047, 10.906863748951734, 1514.285935780923, 42.0]
# [3.7477836041307807e9, 45.38558042955183, 7.688138842033874, 80.09402187327835, 11.808454941688275, 2395.7293180992015, 49.0]
# [3.501725941635261e9, 43.07581244322679, 4.365261021908197, 84.9891852718344, 13.514839858686557, 2769.9915712207967, 56.0]
# [3.2354786487459025e9, 35.658065186268814, 3.19818603374201, 102.5854664778529, 14.217920649458717, 3294.00254803766, 63.0]
# [3.516692330408538e9, 23.8151852275816, 2.051641409772329, 102.77721008364587, 12.729268431144531, 3440.3870984565206, 70.0]
# [2.9756842133021317e9, 14.64955830279397, 0.7328241150615329, 105.8753532956429, 14.738450457211016, 3878.398801864298, 77.0]
# [2.9832548316347604e9, 12.658864011323944, 1.0714184172449406, 110.00120770424469, 15.565786171937585, 4318.107709220469, 84.0]
# [2.8152142955411887e9, 14.073627947322825, 0.2865675550595806, 118.93793028428291, 16.566031188582603, 4632.744925522347, 91.0]
