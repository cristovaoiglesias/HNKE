# using DifferentialEquations, DiffEqFlux, Plots, Statistics
# using XLSX, DataFrames, Optim, BlackBoxOptim,DiffEqParamEstim, CSV, Tables
# using Flux
# using BSON: @save
# using BSON#: @load
# using OrdinaryDiffEq, Optimization, OptimizationOptimJL, OptimizationOptimisers
# using Random, ComponentArrays, Lux

# using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL
# using OptimizationOptimisers, Random, Plots, DifferentialEquations

using Flux, DiffEqFlux, DifferentialEquations, Plots

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end
tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]


sol_SP2_trainingset3=[2.0e8 2.0e8 29.1 9.0 0.0 0.31 80.6; 3.129536365003729e8 4.1865795226568747e8 27.703557176274636 8.641618772557303 6.817319609435776 2.114660512889577 151.1830118633889; 1.2386648428440276e8 5.3026997187705487e8 24.231745060222206 7.367410979234744 5.178125295541914 1.5156348897974181 241.70101648391727; 5.109382398184397e8 6.240846970928319e8 25.114532612385133 6.372174962708278 1.568810103387258 1.4114974357721635 143.32708196139524; 7.849400109181055e8 5.924091079915948e8 19.545376390080214 5.627253826017588 9.583690921002681 1.689752580598195 253.09995240763888; 6.771983726361778e8 8.645847937568333e8 25.23259589946096 5.980495325475819 12.895560200909852 2.8414943732613636 314.9022961419967; 8.094464004969931e8 8.643636510007256e8 15.945521291686621 5.303100924782645 10.040720457666637 4.0395114116384585 470.7227964049848; 7.014347160723717e8 1.201415324224737e9 18.602977518976207 4.4520686454831 18.047086941252395 4.51744221492726 452.8706329165649; 9.334325420354698e8 1.1298005438984923e9 12.599938529905444 2.1662600170640323 18.98010589554851 5.110849684374359 591.2228192190012; 1.2876172728833585e9 1.7641445833178802e9 9.947447610862305 2.257695744478993 22.923010908848457 4.805823832882528 587.3496156387238; 1.1129205267622392e9 1.5395854432172782e9 6.702831970435641 1.3794139556825262 27.93993241705495 6.4706769881197745 801.5612345641601; 1.394324533942827e9 1.829314946375138e9 7.572241137965465 0.9289817390209164 31.58487764470683 6.029885567835202 906.8978311932838; 1.090008747510192e9 1.7731939821706343e9 7.677978986412906 0.5845592162343303 39.75652580775754 6.034579928728037 1203.0214888485166; 1.137639799323255e9 1.9599541068758547e9 3.4291885898599643 0.0019582978675763973 40.29483334421121 7.90399114313737 1034.59285633866; 9.464564723610135e8 1.4294024915492885e9 0.3190126497655885 0.4979045938342344 40.26765777977809 7.317911151271499 1293.5713289165194]'


trainingset=sol_SP2_trainingset3

full_path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/estimating_parameters/SP2/estimation_with_trainingset3"


all_estimated_parameters=Array[]
all_initial_condition=Array[]

for t = 1:14
    p=zeros(6)

    tstart=tgrid_opt[t]
    tend=tgrid_opt[t+1]
    u0=[trainingset[:,t][1];trainingset[:,t][3:end]]
    push!(all_initial_condition, [u0;tstart])

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    function loss_func()
      sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, save_everystep=false, save_start=false)#, maxiters=1e7)
      l=Flux.Losses.mse(sol[1,1],trainingset[:,t+1][1])+
      Flux.Losses.mse(sol[2,1],trainingset[:,t+1][3])+
      Flux.Losses.mse(sol[3,1],trainingset[:,t+1][4])+
      Flux.Losses.mse(sol[4,1],trainingset[:,t+1][5])+
      Flux.Losses.mse(sol[5,1],trainingset[:,t+1][6])+
      Flux.Losses.mse(sol[6,1],trainingset[:,t+1][7])
      return l
    end

    epochs = 600
    learning_rate = 0.05
    data = Iterators.repeated((), epochs)
    opt = Adam(learning_rate)
    counter=0

    callback_func = function ()
      global counter=counter+1
      # println("loss: ", loss_func(), "    epoch: ",counter)
    end

    fparams = Flux.params(p)
    Flux.train!(loss_func, fparams, data, opt, cb=callback_func)

    # p = round.(p;digits=4)
    push!(all_estimated_parameters, p)
    println("\n\nParameters estimated: ", p)
    println("loss: ", loss_func(), "    epoch: ",counter, "    t=", t)

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, saveat = tgrid)

    plots=plot(sol.t,sol', title="from t"*string(t)*" to t"*string(t+1), idxs = (1,2,3,4,5,6), color=[:blue :yellow :orange :green :lightgreen :purple ], label = ["Prediction" "Prediction" "Prediction" "Prediction" "Prediction" "Prediction"], ylabel=["[Xv]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,2),size = (800, 600))
    Plots.scatter!([tgrid_opt[t]],[trainingset[:,t][1];trainingset[:,t][3:end]]' , color=:red,   labels = false, layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    Plots.scatter!([tgrid_opt[t+1]],[trainingset[:,t+1][1];trainingset[:,t+1][3:end]]' , color=:red,   labels = "Observed values", layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    display(plots)
    savefig(full_path*"/from t"*string(t)*" to t"*string(t+1))

end





println("\n\n all_estimated_parameters ")
# all_estimated_parameters = hcat(all_estimated_parameters...)'
display(all_estimated_parameters)
println("\n\n all_initial_condition")
# all_initial_condition = hcat(all_initial_condition...)'
display(all_initial_condition)

# # # #
# all_estimated_parameters
# 14-element Vector{Array}:
# [0.06396252665623284, 7.907663022771438e-10, 2.0294067239357308e-10, 3.860459201515955e-9, 1.0219287122168513e-9, 3.996921069407654e-8]
# [-0.13240732597403193, 2.431120542039823e-9, 8.922591836340185e-10, -1.147839156351065e-9, -4.1946626959321127e-10, 6.338477842122267e-8]
# [0.20243497505126948, -4.6168993023763517e-10, 5.204994448874145e-10, -1.8876388579948164e-9, -5.4463076472524886e-11, -5.144866488297389e-8]
# [0.0613369391409239, 1.2466903126820561e-9, 1.6675636678168044e-10, 1.7941804258142539e-9, 6.229038677280102e-11, 2.457331645801737e-8]
# [-0.021091864081796887, -1.1133492794690154e-9, -6.915187356180033e-11, 6.483427602963863e-10, 2.2546896621379298e-10, 1.2098634002968174e-8]
# [0.025483758655008373, 1.7895884479585523e-9, 1.3053147716952656e-10, -5.501180108364315e-10, 2.3085374180946987e-10, 3.0026096127643396e-8]
# [-0.02046038943295111, -5.033960849182785e-10, 1.6120961079509412e-10, 1.5166270836768383e-9, 9.053390993963958e-11, -3.3816923502027085e-9]
# [0.04082012355132399, 1.0562377940948666e-9, 4.021894125553758e-10, 1.6416545087430885e-10, 1.0441065483880617e-10, 2.43431307762297e-8]
# [0.045954288180825524, 3.441511587999575e-10, -1.1862784757936061e-11, 5.115780860380628e-10, -3.9575391371390365e-11, -5.025345574475101e-10]
# [-0.02082939571606982, 3.8686149735375157e-10, 1.047194123577661e-10, 5.98176596633398e-10, 1.9850367917745286e-10, 2.554082281654025e-8]
# [0.03220320394258957, -9.949164688240012e-11, 5.154492312655978e-11, 4.1711737897405535e-10, -5.0441653365017744e-11, 1.2054467614871063e-8]
# [-0.035174910556872864, -1.2222925419958002e-11, 3.981174087255647e-11, 9.44536287150986e-10, 5.436245241236479e-13, 3.4228009015680294e-8]
# [0.006110006192526537, 5.450266805940166e-10, 7.473598655871582e-11, 6.905412929383281e-11, 2.39805171012608e-10, -2.1605654439602083e-8]
# [-0.026283723176118715, 4.2758385023623226e-10, -6.818175500109448e-11, -3.735548648678643e-12, -8.057325979113118e-11, 3.560414231457215e-8]
#
#
# all_initial_condition
# 14-element Vector{Array}:
# [2.0e8, 29.1, 9.0, 0.0, 0.31, 80.6, 0.0]
# [3.129536365003729e8, 27.703557176274636, 8.641618772557303, 6.817319609435776, 2.114660512889577, 151.1830118633889, 7.0]
# [1.2386648428440276e8, 24.231745060222206, 7.367410979234744, 5.178125295541914, 1.5156348897974181, 241.70101648391727, 14.0]
# [5.109382398184397e8, 25.114532612385133, 6.372174962708278, 1.568810103387258, 1.4114974357721635, 143.32708196139524, 21.0]
# [7.849400109181055e8, 19.545376390080214, 5.627253826017588, 9.583690921002681, 1.689752580598195, 253.09995240763888, 28.0]
# [6.771983726361778e8, 25.23259589946096, 5.980495325475819, 12.895560200909852, 2.8414943732613636, 314.9022961419967, 35.0]
# [8.094464004969931e8, 15.945521291686621, 5.303100924782645, 10.040720457666637, 4.0395114116384585, 470.7227964049848, 42.0]
# [7.014347160723717e8, 18.602977518976207, 4.4520686454831, 18.047086941252395, 4.51744221492726, 452.8706329165649, 49.0]
# [9.334325420354698e8, 12.599938529905444, 2.1662600170640323, 18.98010589554851, 5.110849684374359, 591.2228192190012, 56.0]
# [1.2876172728833585e9, 9.947447610862305, 2.257695744478993, 22.923010908848457, 4.805823832882528, 587.3496156387238, 63.0]
# [1.1129205267622392e9, 6.702831970435641, 1.3794139556825262, 27.93993241705495, 6.4706769881197745, 801.5612345641601, 70.0]
# [1.394324533942827e9, 7.572241137965465, 0.9289817390209164, 31.58487764470683, 6.029885567835202, 906.8978311932838, 77.0]
# [1.090008747510192e9, 7.677978986412906, 0.5845592162343303, 39.75652580775754, 6.034579928728037, 1203.0214888485166, 84.0]
# [1.137639799323255e9, 3.4291885898599643, 0.0019582978675763973, 40.29483334421121, 7.90399114313737, 1034.59285633866, 91.0]
