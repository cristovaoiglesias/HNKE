# using DifferentialEquations, DiffEqFlux, Plots, Statistics
# using XLSX, DataFrames, Optim, BlackBoxOptim,DiffEqParamEstim, CSV, Tables
# using Flux
# using BSON: @save
# using BSON#: @load
# using OrdinaryDiffEq, Optimization, OptimizationOptimJL, OptimizationOptimisers
# using Random, ComponentArrays, Lux

# using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL
# using OptimizationOptimisers, Random, Plots, DifferentialEquations

using Flux, DiffEqFlux, DifferentialEquations, Plots

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end
tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]


sol_SP2_trainingset1=[1.1247355623692597e8 1.1803877826834212e8 28.362434400414728 8.049287234220433 6.478374311384509 0.44980108386611184 105.39409595931008; 2.4196759058161804e8 2.3282346579114172e8 24.85424333091565 8.906283046128749 5.640975512724345 1.6265148691545954 20.323240100403737; 3.493034570358188e8 2.6954492597020465e8 31.23625485627962 7.7541189410675315 2.966864380375631 1.836560819038935 126.73237311495005; 4.276364277486141e8 4.4745917288521624e8 25.14654450035551 6.600329008412212 5.6949193302019205 3.0169072378772706 266.0319124127552; 7.925324528095523e8 9.997578635496116e8 25.54096070727368 4.741407872384233 4.163839457216961 3.2578660650203823 243.09045138333607; 5.246451684999747e8 8.260334120980022e8 23.236903874435786 5.315224611414014 10.88161500395123 2.3545354178320177 401.8224497368311; 8.368163155812794e8 1.04345403162706e9 18.42369679248271 4.078839033351382 9.607101085314206 4.059113408256148 324.2315198204997; 1.0590144217474914e9 1.261444516358222e9 18.165480720961334 2.915917865732507 20.801190902506747 5.1982268807349366 466.11011302743884; 1.0227473046937926e9 1.592674273280279e9 14.611398806121278 2.2853818872158334 17.8468615313891 4.088447140756373 610.6115156819029; 1.331207248384273e9 1.6014571520389836e9 10.515676978233254 1.9157217703438865 26.872117539788377 3.9370233158681343 748.7814793996765; 1.2209276528515527e9 1.72504705282611e9 7.087474183518283 1.4217179238523912 30.6416371496524 5.5465420928972105 887.7600432318577; 1.1621795437162645e9 1.945193653110793e9 5.272140656581968 0.12230345239024032 32.45275626240531 5.9757813913567475 1012.2265624601275; 1.1339535474456625e9 1.9673357701631823e9 1.0876934495531811 0.6906369957163623 33.60253831449344 6.133471933657032 1120.8734926890247; 1.0339062219439954e9 1.9466010141767688e9 1.9777368230642987 0.5471964814039842 35.74294777321867 7.5495573378527485 1068.0282244372231; 1.1472986794992154e9 1.851818960588357e9 1.241371596959783 0.16744421475440954 35.552843243271525 6.189765022102117 1343.574695966362]'

trainingset=sol_SP2_trainingset1

full_path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/estimating_parameters/SP2/estimation_with_trainingset1"


all_estimated_parameters=Array[]
all_initial_condition=Array[]

for t = 1:14
    p=zeros(6)

    tstart=tgrid_opt[t]
    tend=tgrid_opt[t+1]
    u0=[trainingset[:,t][1];trainingset[:,t][3:end]]
    push!(all_initial_condition, [u0;tstart])

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    function loss_func()
      sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, save_everystep=false, save_start=false)#, maxiters=1e7)
      l=Flux.Losses.mse(sol[1,1],trainingset[:,t+1][1])+
      Flux.Losses.mse(sol[2,1],trainingset[:,t+1][3])+
      Flux.Losses.mse(sol[3,1],trainingset[:,t+1][4])+
      Flux.Losses.mse(sol[4,1],trainingset[:,t+1][5])+
      Flux.Losses.mse(sol[5,1],trainingset[:,t+1][6])+
      Flux.Losses.mse(sol[6,1],trainingset[:,t+1][7])
      return l
    end

    epochs = 600
    learning_rate = 0.05
    data = Iterators.repeated((), epochs)
    opt = Adam(learning_rate)
    counter=0

    callback_func = function ()
      global counter=counter+1
      # println("loss: ", loss_func(), "    epoch: ",counter)
    end

    fparams = Flux.params(p)
    Flux.train!(loss_func, fparams, data, opt, cb=callback_func)

    # p = round.(p;digits=4)
    push!(all_estimated_parameters, p)
    println("\n\nParameters estimated: ", p)
    println("loss: ", loss_func(), "    epoch: ",counter, "    t=", t)

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, saveat = tgrid)

    plots=plot(sol.t,sol', title="from t"*string(t)*" to t"*string(t+1), idxs = (1,2,3,4,5,6), color=[:blue :yellow :orange :green :lightgreen :purple ], label = ["Prediction" "Prediction" "Prediction" "Prediction" "Prediction" "Prediction"], ylabel=["[Xv]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,2),size = (800, 600))
    Plots.scatter!([tgrid_opt[t]],[trainingset[:,t][1];trainingset[:,t][3:end]]' , color=:red,   labels = false, layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    Plots.scatter!([tgrid_opt[t+1]],[trainingset[:,t+1][1];trainingset[:,t+1][3:end]]' , color=:red,   labels = "Observed values", layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    display(plots)
    savefig(full_path*"/from t"*string(t)*" to t"*string(t+1))

end





println("\n\n all_estimated_parameters ")
# all_estimated_parameters = hcat(all_estimated_parameters...)'
display(all_estimated_parameters)
println("\n\n all_initial_condition")
# all_initial_condition = hcat(all_initial_condition...)'
display(all_initial_condition)

# # # #
# all_estimated_parameters
# 14-element Vector{Array}:
# [0.1094408117302834, 2.9649176435257667e-9, -7.242819067849792e-10, -7.077196531782415e-10, 9.944889067344796e-10, -7.189692896472483e-8]
# [0.05244817923237387, -3.1184825736683246e-9, 5.629903237822163e-10, -1.3066685844273875e-9, 1.026373821868106e-10, 5.199534516657813e-8]
# [0.028904616824427264, 2.247084854599167e-9, 4.2574593164659826e-10, 1.0066447113958173e-9, 4.3554519050700644e-10, 5.1401087667923916e-8]
# [0.08813715800690904, -9.526690027850606e-11, 4.490041116473892e-10, -3.6981717833267383e-10, 5.820073238338852e-11, -5.541290741911336e-9]
# [-0.05893018601538074, 5.068491086752346e-10, -1.262286889947243e-10, 1.4777845732080977e-9, -1.9871557822051206e-10, 3.4918066930075485e-8]
# [0.06669749014786464, 1.0283741018050809e-9, 2.641618443798585e-10, -2.723082238373022e-10, 3.6419433970314226e-10, -1.6577829895736455e-8]
# [0.033641338983473934, 3.909428572119564e-11, 1.7606885919203307e-10, 1.6948124289102437e-9, 1.7246431567702053e-10, 2.1480767198340915e-8]
# [-0.004978034617740466, 4.878356137496212e-10, 8.65488818601204e-11, -4.0551341206208886e-10, -1.5233001443138637e-10, 1.9834304231005077e-8]
# [0.037656256200197614, 4.999982154296961e-10, 4.5127048924606803e-11, 1.101787218651654e-9, -1.8485140011803697e-11, 1.6867549677723367e-8]
# [-0.012353613581972352, 3.840288316873888e-10, 5.533738333941198e-11, 4.222634300552972e-10, 1.8029830952138987e-10, 1.5568494943118475e-8]
# [-0.007044825977269134, 2.1768793041777034e-10, 1.5582108878273764e-10, 2.1718255560731694e-10, 5.1473344593657996e-11, 1.4925501882277797e-8]
# [-0.0035124168776747705, 5.207094593692189e-10, -7.072361858603161e-11, 1.4307853339794267e-10, 1.9623583226761913e-11, 1.3519924258597443e-8]
# [-0.013195166213071347, -1.1738595445252642e-10, 1.8917067125302887e-11, 2.822957932587528e-10, 1.8676524065624724e-10, -6.969721331377657e-9]
# [0.014866589617965852, 9.654242676537323e-11, 4.9787830957106335e-11, -2.492361040542521e-11, -1.7827832788595872e-10, 3.612617933021248e-8]
#
#
# all_initial_condition
# 14-element Vector{Array}:
# [1.1247355623692597e8, 28.362434400414728, 8.049287234220433, 6.478374311384509, 0.44980108386611184, 105.39409595931008, 0.0]
# [2.4196759058161804e8, 24.85424333091565, 8.906283046128749, 5.640975512724345, 1.6265148691545954, 20.323240100403737, 7.0]
# [3.493034570358188e8, 31.23625485627962, 7.7541189410675315, 2.966864380375631, 1.836560819038935, 126.73237311495005, 14.0]
# [4.276364277486141e8, 25.14654450035551, 6.600329008412212, 5.6949193302019205, 3.0169072378772706, 266.0319124127552, 21.0]
# [7.925324528095523e8, 25.54096070727368, 4.741407872384233, 4.163839457216961, 3.2578660650203823, 243.09045138333607, 28.0]
# [5.246451684999747e8, 23.236903874435786, 5.315224611414014, 10.88161500395123, 2.3545354178320177, 401.8224497368311, 35.0]
# [8.368163155812794e8, 18.42369679248271, 4.078839033351382, 9.607101085314206, 4.059113408256148, 324.2315198204997, 42.0]
# [1.0590144217474914e9, 18.165480720961334, 2.915917865732507, 20.801190902506747, 5.1982268807349366, 466.11011302743884, 49.0]
# [1.0227473046937926e9, 14.611398806121278, 2.2853818872158334, 17.8468615313891, 4.088447140756373, 610.6115156819029, 56.0]
# [1.331207248384273e9, 10.515676978233254, 1.9157217703438865, 26.872117539788377, 3.9370233158681343, 748.7814793996765, 63.0]
# [1.2209276528515527e9, 7.087474183518283, 1.4217179238523912, 30.6416371496524, 5.5465420928972105, 887.7600432318577, 70.0]
# [1.1621795437162645e9, 5.272140656581968, 0.12230345239024032, 32.45275626240531, 5.9757813913567475, 1012.2265624601275, 77.0]
# [1.1339535474456625e9, 1.0876934495531811, 0.6906369957163623, 33.60253831449344, 6.133471933657032, 1120.8734926890247, 84.0]
# [1.0339062219439954e9, 1.9777368230642987, 0.5471964814039842, 35.74294777321867, 7.5495573378527485, 1068.0282244372231, 91.0]
