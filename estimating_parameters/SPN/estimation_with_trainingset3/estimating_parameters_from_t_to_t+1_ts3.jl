# using DifferentialEquations, DiffEqFlux, Plots, Statistics
# using XLSX, DataFrames, Optim, BlackBoxOptim,DiffEqParamEstim, CSV, Tables
# using Flux
# using BSON: @save
# using BSON#: @load
# using OrdinaryDiffEq, Optimization, OptimizationOptimJL, OptimizationOptimisers
# using Random, ComponentArrays, Lux

# using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL
# using OptimizationOptimisers, Random, Plots, DifferentialEquations

using Flux, DiffEqFlux, DifferentialEquations, Plots

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end
tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]


sol_SPN_trainingset3=[2.0e8 2.0e8 29.1 4.9 0.0 0.31 80.6; 3.643989175128883e8 1.226787979392781e8 25.976960833396042 4.433493824124547 2.358897646991173 1.0604369913104934 213.79518148706447; 5.281782026290082e8 4.791718091867136e8 25.65459073655148 3.7949319612290395 5.052628724733424 0.5722295122697542 27.12506924084812; 7.951466313263139e8 7.048861298025367e8 25.634754440761103 3.5963446836440234 5.045258040189131 2.0534560562085513 57.35573910822876; 7.212620287851577e8 6.476562884842467e8 20.937350571773006 2.673419615912892 6.878889398898858 1.706285376482042 289.18497990425476; 6.716809303914777e8 1.0043026290708855e9 20.978741849310257 2.3948737336146175 10.962774380985524 3.136543969146835 159.02056898113443; 9.212781310692064e8 1.4172461768435953e9 18.599103062444176 1.0453588306475594 12.176219420388616 2.5314545267596174 471.6709243393201; 1.2497857745238185e9 1.4407802581949515e9 13.780926956668882 0.8440471261681337 15.383536664071173 2.568225220575419 656.8773231240557; 1.230711148862783e9 1.5948552191758285e9 14.364832742942589 0.734393184812483 25.44792506622757 2.8426934162450497 689.5156782844671; 1.3910546655572267e9 1.7399961029085228e9 11.174403527310078 0.5409098989270759 28.715585466638313 3.7550239614320002 749.2154121474014; 9.272975038150387e8 1.4916828751823616e9 12.593717133721949 0.21751584806363813 22.920615823977784 3.821298984884895 996.0842226378891; 9.041751428194731e8 1.4133909821688325e9 9.316778932914536 0.1659285055939144 24.895186977391276 3.8725749443200335 971.3300857943512; 7.034630464282873e8 1.2855273781897802e9 10.526680557602678 0.22951415872006325 24.522795470266605 3.393671015486947 1064.990030957789; 6.110984409599118e8 9.691262362011799e8 10.638596109235142 0.04875384495257478 23.830752737780607 3.7407657965818304 1061.8420292865017; 6.238122214701798e8 5.097075932248804e8 10.132329495148138 0.26099829080259 26.168261932801993 3.7327307122717697 1270.6981374150373]'

trainingset=sol_SPN_trainingset3

full_path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/estimating_parameters/SPN/estimation_with_trainingset3"


all_estimated_parameters=Array[]
all_initial_condition=Array[]

for t = 1:14
    p=zeros(6)

    tstart=tgrid_opt[t]
    tend=tgrid_opt[t+1]
    u0=[trainingset[:,t][1];trainingset[:,t][3:end]]
    push!(all_initial_condition, [u0;tstart])

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    function loss_func()
      sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, save_everystep=false, save_start=false)#, maxiters=1e7)
      l=Flux.Losses.mse(sol[1,1],trainingset[:,t+1][1])+
      Flux.Losses.mse(sol[2,1],trainingset[:,t+1][3])+
      Flux.Losses.mse(sol[3,1],trainingset[:,t+1][4])+
      Flux.Losses.mse(sol[4,1],trainingset[:,t+1][5])+
      Flux.Losses.mse(sol[5,1],trainingset[:,t+1][6])+
      Flux.Losses.mse(sol[6,1],trainingset[:,t+1][7])
      return l
    end

    epochs = 525
    learning_rate = 0.05
    data = Iterators.repeated((), epochs)
    opt = Adam(learning_rate)
    counter=0

    callback_func = function ()
      global counter=counter+1
      # println("loss: ", loss_func(), "    epoch: ",counter)
    end

    fparams = Flux.params(p)
    Flux.train!(loss_func, fparams, data, opt, cb=callback_func)

    # p = round.(p;digits=4)
    push!(all_estimated_parameters, p)
    println("\n\nParameters estimated: ", p)
    println("loss: ", loss_func(), "    epoch: ",counter, "    t=", t)

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, saveat = tgrid)

    plots=plot(sol.t,sol', title="from t"*string(t)*" to t"*string(t+1), idxs = (1,2,3,4,5,6), color=[:blue :yellow :orange :green :lightgreen :purple ], label = ["Prediction" "Prediction" "Prediction" "Prediction" "Prediction" "Prediction"], ylabel=["[Xv]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,2),size = (800, 600))
    Plots.scatter!([tgrid_opt[t]],[trainingset[:,t][1];trainingset[:,t][3:end]]' , color=:red,   labels = false, layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    Plots.scatter!([tgrid_opt[t+1]],[trainingset[:,t+1][1];trainingset[:,t+1][3:end]]' , color=:red,   labels = "Observed values", layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    display(plots)
    savefig(full_path*"/from t"*string(t)*" to t"*string(t+1))

end





println("\n\n all_estimated_parameters ")
# all_estimated_parameters = hcat(all_estimated_parameters...)'
display(all_estimated_parameters)
println("\n\n all_initial_condition")
# all_initial_condition = hcat(all_initial_condition...)'
display(all_initial_condition)
#
# all_estimated_parameters
# 14-element Vector{Array}:
# [0.08570454726350918, 1.628045375523911e-9, 2.431399226914581e-10, 1.2296826369692423e-9, 3.911589143228459e-10, 6.943733657947865e-8]
# [0.05302636247001835, 1.043264261971736e-10, 2.066989526708824e-10, 8.720953590433372e-10, -1.5801913303531753e-10, -6.043761531845202e-8]
# [0.05844182970315745, 4.309708543116844e-12, 4.3439932636041565e-11, -1.5808722781801825e-12, 3.2422139419168697e-10, 6.617737370990652e-9]
# [-0.013932006314984065, 8.858314953186813e-10, 1.74099135910719e-10, 3.4582592822705644e-10, -6.553235077536375e-11, 4.371481178761249e-8]
# [-0.01017415336777156, -8.507162471851981e-12, 5.717182293767207e-11, 8.380359998534883e-10, 2.935058720303917e-10, -2.6710044651994585e-8]
# [0.045139793841401106, 4.3032593446917994e-10, 2.440274519201895e-10, 2.1941914072691262e-10, -1.0939768957361303e-10, 5.654295916246688e-8]
# [0.04356649377013819, 6.390428429899538e-10, 2.6756955149229945e-11, 4.254116719541066e-10, 4.935621437954094e-12, 2.4562024650295006e-8]
# [-0.0021971405900147786, -6.726978812295616e-11, 1.2642347577543797e-11, 1.1592940068804671e-9, 3.1626735250572453e-11, 3.7595116764053125e-9]
# [0.017495719930090907, 3.4808183773341167e-10, 2.1073127306673978e-11, 3.5650883999874356e-10, 9.950941570438582e-11, 6.51403720463092e-9]
# [-0.057934724300031736, -1.7725501319747022e-10, 4.034759085346241e-11, -7.238825333962648e-10, 8.227073339054501e-12, 3.0839959920604e-8]
# [-0.0036073374619300653, 5.112026239786139e-10, 8.013136110057692e-12, 3.080193312521971e-10, 7.964557001431765e-12, -3.861877034469517e-9]
# [-0.03585824844296554, -2.161540123073707e-10, -1.1358767689526088e-11, -6.652852190910079e-11, -8.555751391458807e-11, 1.6732829825215748e-8]
# [-0.020108183768146385, -2.4304806132235973e-11, 3.929261582296476e-11, -1.5060106329699858e-10, 7.550436620162601e-11, -6.852742038739488e-10]
# [0.00294161932213784, 1.1716790061540381e-10, -4.913925324925265e-11, 5.408670948879003e-10, -1.8908204920631646e-12, 4.832359390640996e-8]
#
#
# all_initial_condition
# 14-element Vector{Array}:
# [2.0e8, 29.1, 4.9, 0.0, 0.31, 80.6, 0.0]
# [3.643989175128883e8, 25.976960833396042, 4.433493824124547, 2.358897646991173, 1.0604369913104934, 213.79518148706447, 7.0]
# [5.281782026290082e8, 25.65459073655148, 3.7949319612290395, 5.052628724733424, 0.5722295122697542, 27.12506924084812, 14.0]
# [7.951466313263139e8, 25.634754440761103, 3.5963446836440234, 5.045258040189131, 2.0534560562085513, 57.35573910822876, 21.0]
# [7.212620287851577e8, 20.937350571773006, 2.673419615912892, 6.878889398898858, 1.706285376482042, 289.18497990425476, 28.0]
# [6.716809303914777e8, 20.978741849310257, 2.3948737336146175, 10.962774380985524, 3.136543969146835, 159.02056898113443, 35.0]
# [9.212781310692064e8, 18.599103062444176, 1.0453588306475594, 12.176219420388616, 2.5314545267596174, 471.6709243393201, 42.0]
# [1.2497857745238185e9, 13.780926956668882, 0.8440471261681337, 15.383536664071173, 2.568225220575419, 656.8773231240557, 49.0]
# [1.230711148862783e9, 14.364832742942589, 0.734393184812483, 25.44792506622757, 2.8426934162450497, 689.5156782844671, 56.0]
# [1.3910546655572267e9, 11.174403527310078, 0.5409098989270759, 28.715585466638313, 3.7550239614320002, 749.2154121474014, 63.0]
# [9.272975038150387e8, 12.593717133721949, 0.21751584806363813, 22.920615823977784, 3.821298984884895, 996.0842226378891, 70.0]
# [9.041751428194731e8, 9.316778932914536, 0.1659285055939144, 24.895186977391276, 3.8725749443200335, 971.3300857943512, 77.0]
# [7.034630464282873e8, 10.526680557602678, 0.22951415872006325, 24.522795470266605, 3.393671015486947, 1064.990030957789, 84.0]
# [6.110984409599118e8, 10.638596109235142, 0.04875384495257478, 23.830752737780607, 3.7407657965818304, 1061.8420292865017, 91.0]
