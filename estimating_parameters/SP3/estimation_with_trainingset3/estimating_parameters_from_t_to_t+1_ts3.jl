# using DifferentialEquations, DiffEqFlux, Plots, Statistics
# using XLSX, DataFrames, Optim, BlackBoxOptim,DiffEqParamEstim, CSV, Tables
# using Flux
# using BSON: @save
# using BSON#: @load
# using OrdinaryDiffEq, Optimization, OptimizationOptimJL, OptimizationOptimisers
# using Random, ComponentArrays, Lux

# using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL
# using OptimizationOptimisers, Random, Plots, DifferentialEquations

using Flux, DiffEqFlux, DifferentialEquations, Plots

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end
tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]


sol_SP3_trainingset3=[2.0e8 2.0e8 45.0 10.0 0.0 0.31 80.6; 3.433161083771171e8 2.983103677689088e8 39.89491908810334 8.619429096814404 1.7123044701117944 1.6323456697004657 13.163672825054604; 3.814417258462148e8 7.619890133205655e8 40.31313835041098 6.274473250612248 6.212990409429368 0.9514010681773806 32.93791646234152; 3.1005438111569804e8 3.269229087272985e8 35.56872041221474 6.366934023924735 2.6642452653700803 2.892410228621317 145.79890500801824; 6.721827631091003e8 8.217418637726732e8 37.29263181055098 6.935963673988518 4.905821180776804 3.186897823620666 180.43675804398092; 5.127588295198812e8 8.83746086021954e8 37.71109026610852 6.1239850706485415 9.734972858540118 3.482030190790398 280.9584354712077; 8.615724798769839e8 1.0092830448355122e9 37.810874439576054 4.91738526923372 15.321043973415362 4.576357682006793 459.18247376993736; 1.0525438014885246e9 1.270112580692705e9 28.21915983280714 3.1484841890595923 18.146952781136818 3.9856780891263925 375.0435487765534; 1.2947072338693218e9 1.2491762682316399e9 30.40376509910492 3.651801176567819 21.961148022748716 4.513879324017582 670.7138312041094; 1.1540029812401786e9 1.4392284991853418e9 21.092300834086863 3.175694291035242 22.26586324653385 6.838396196542468 741.1156483006941; 1.2069778391992278e9 1.648290696302809e9 18.27639903611619 1.9851855143361599 29.759927755285183 5.969527244804506 818.9098294208213; 1.1349723436070814e9 1.967124981616302e9 16.827002339113182 1.6455861299678762 29.16364515376808 6.519896796984991 926.7994415050441; 1.4608232394846573e9 2.0119159213120596e9 16.33469802283399 1.540110842690193 32.97034746636092 6.632640177255661 1104.9449560667033; 1.23860901617117e9 1.988478260902681e9 18.684755581387343 0.18841047029530616 40.556216743730275 6.5382108214144266 1189.0755854103563; 1.3770226857279186e9 1.8344326568643987e9 14.771592770606134 0.961922233439074 44.938893632895486 6.615289123665037 1273.7845288946478]'


trainingset=sol_SP3_trainingset3

full_path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/estimating_parameters/SP3/estimation_with_trainingset3"


all_estimated_parameters=Array[]
all_initial_condition=Array[]

for t = 1:14
    p=zeros(6)

    tstart=tgrid_opt[t]
    tend=tgrid_opt[t+1]
    u0=[trainingset[:,t][1];trainingset[:,t][3:end]]
    push!(all_initial_condition, [u0;tstart])

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    function loss_func()
      sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, save_everystep=false, save_start=false)#, maxiters=1e7)
      l=Flux.Losses.mse(sol[1,1],trainingset[:,t+1][1])+
      Flux.Losses.mse(sol[2,1],trainingset[:,t+1][3])+
      Flux.Losses.mse(sol[3,1],trainingset[:,t+1][4])+
      Flux.Losses.mse(sol[4,1],trainingset[:,t+1][5])+
      Flux.Losses.mse(sol[5,1],trainingset[:,t+1][6])+
      Flux.Losses.mse(sol[6,1],trainingset[:,t+1][7])
      return l
    end

    epochs = 600
    learning_rate = 0.05
    data = Iterators.repeated((), epochs)
    opt = Adam(learning_rate)
    counter=0

    callback_func = function ()
      global counter=counter+1
      # println("loss: ", loss_func(), "    epoch: ",counter)
    end

    fparams = Flux.params(p)
    Flux.train!(loss_func, fparams, data, opt, cb=callback_func)

    # p = round.(p;digits=4)
    push!(all_estimated_parameters, p)
    println("\n\nParameters estimated: ", p)
    println("loss: ", loss_func(), "    epoch: ",counter, "    t=", t)

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, saveat = tgrid)

    plots=plot(sol.t,sol', title="from t"*string(t)*" to t"*string(t+1), idxs = (1,2,3,4,5,6), color=[:blue :yellow :orange :green :lightgreen :purple ], label = ["Prediction" "Prediction" "Prediction" "Prediction" "Prediction" "Prediction"], ylabel=["[Xv]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,2),size = (800, 600))
    Plots.scatter!([tgrid_opt[t]],[trainingset[:,t][1];trainingset[:,t][3:end]]' , color=:red,   labels = false, layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    Plots.scatter!([tgrid_opt[t+1]],[trainingset[:,t+1][1];trainingset[:,t+1][3:end]]' , color=:red,   labels = "Observed values", layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    display(plots)
    savefig(full_path*"/from t"*string(t)*" to t"*string(t+1))

end





println("\n\n all_estimated_parameters ")
# all_estimated_parameters = hcat(all_estimated_parameters...)'
display(all_estimated_parameters)
println("\n\n all_initial_condition")
# all_initial_condition = hcat(all_initial_condition...)'
display(all_initial_condition)

#
#
# #
# all_estimated_parameters
# 14-element Vector{Array}:
# [0.07719060825733014, 2.7496150495916134e-9, 7.43579606061707e-10, 9.22252583582538e-10, 7.122192709288169e-10, -3.632146448767074e-8]
# [0.015043781064650619, -1.650225297607255e-10, 9.252830910761743e-10, 1.7759009619030067e-9, -2.686898995160641e-10, 7.80261143483693e-9]
# [-0.029601483525714463, 1.967322118682693e-9, -3.8341094136376245e-11, -1.4715243179490606e-9, 8.048603537395287e-10, 4.679895013004331e-8]
# [0.11054036974834466, -5.262262127247375e-10, -1.7369638678764624e-10, 6.842442802625158e-10, 8.98919080788504e-11, 1.0573268807148536e-8]
# [-0.03867495169488428, -1.0151544724699647e-10, 1.969802395399925e-10, 1.1715138061588942e-9, 7.15975396669362e-11, 2.4385743487010416e-8]
# [0.07413622488891254, -2.1209050776528286e-11, 2.564496505072371e-10, 1.1872545942290213e-9, 2.3258749594657894e-10, 3.78794171470283e-8]
# [0.028600856657455816, 1.436506299304132e-9, 2.649211291160533e-10, 4.2322409443135966e-10, -8.846456179312674e-11, -1.2601083579707048e-8]
# [0.029582098988165578, -2.66866573136488e-10, -6.148446485755677e-11, 4.659333417463218e-10, 6.452426431070392e-11, 3.611836680987491e-8]
# [-0.016435406271214446, 1.087655585198852e-9, 5.5613657769092016e-11, 3.559371139477603e-11, 2.715230458924555e-10, 8.22350790850644e-9]
# [0.006411832890657741, 3.408251775398909e-10, 1.440950901817881e-10, 9.07048451986641e-10, -1.0516528672234973e-10, 9.415850877766083e-9]
# [-0.008787328277704922, 1.7687959267352932e-10, 4.144335648321681e-11, -7.276818348367728e-11, 6.716509675479423e-11, 1.31665147154214e-8]
# [0.03605597936055601, 5.44757103632098e-11, 1.167239245876344e-11, 4.2121972506206815e-10, 1.2476619834720278e-11, 1.9712118402036386e-8]
# [-0.023573021552547167, -2.4929841135525515e-10, 1.4339026958285943e-10, 8.047259652386807e-10, -1.0015923293181095e-11, 8.92477900179507e-9]
# [0.015133529361537218, 4.278473911882621e-10, -8.457203791658451e-11, 4.791819531118148e-10, 8.427129233751117e-12, 9.261695399370763e-9]
#
#
# all_initial_condition
# 14-element Vector{Array}:
# [2.0e8, 45.0, 10.0, 0.0, 0.31, 80.6, 0.0]
# [3.433161083771171e8, 39.89491908810334, 8.619429096814404, 1.7123044701117944, 1.6323456697004657, 13.163672825054604, 7.0]
# [3.814417258462148e8, 40.31313835041098, 6.274473250612248, 6.212990409429368, 0.9514010681773806, 32.93791646234152, 14.0]
# [3.1005438111569804e8, 35.56872041221474, 6.366934023924735, 2.6642452653700803, 2.892410228621317, 145.79890500801824, 21.0]
# [6.721827631091003e8, 37.29263181055098, 6.935963673988518, 4.905821180776804, 3.186897823620666, 180.43675804398092, 28.0]
# [5.127588295198812e8, 37.71109026610852, 6.1239850706485415, 9.734972858540118, 3.482030190790398, 280.9584354712077, 35.0]
# [8.615724798769839e8, 37.810874439576054, 4.91738526923372, 15.321043973415362, 4.576357682006793, 459.18247376993736, 42.0]
# [1.0525438014885246e9, 28.21915983280714, 3.1484841890595923, 18.146952781136818, 3.9856780891263925, 375.0435487765534, 49.0]
# [1.2947072338693218e9, 30.40376509910492, 3.651801176567819, 21.961148022748716, 4.513879324017582, 670.7138312041094, 56.0]
# [1.1540029812401786e9, 21.092300834086863, 3.175694291035242, 22.26586324653385, 6.838396196542468, 741.1156483006941, 63.0]
# [1.2069778391992278e9, 18.27639903611619, 1.9851855143361599, 29.759927755285183, 5.969527244804506, 818.9098294208213, 70.0]
# [1.1349723436070814e9, 16.827002339113182, 1.6455861299678762, 29.16364515376808, 6.519896796984991, 926.7994415050441, 77.0]
# [1.4608232394846573e9, 16.33469802283399, 1.540110842690193, 32.97034746636092, 6.632640177255661, 1104.9449560667033, 84.0]
# [1.23860901617117e9, 18.684755581387343, 0.18841047029530616, 40.556216743730275, 6.5382108214144266, 1189.0755854103563, 91.0]
