# using DifferentialEquations, DiffEqFlux, Plots, Statistics
# using XLSX, DataFrames, Optim, BlackBoxOptim,DiffEqParamEstim, CSV, Tables
# using Flux
# using BSON: @save
# using BSON#: @load
# using OrdinaryDiffEq, Optimization, OptimizationOptimJL, OptimizationOptimisers
# using Random, ComponentArrays, Lux

# using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL
# using OptimizationOptimisers, Random, Plots, DifferentialEquations

using Flux, DiffEqFlux, DifferentialEquations, Plots

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end
tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]


sol_SP3_trainingset1=[3.8819132871498865e8 3.486684756900814e8 38.936369597217414 9.154049869890251 0.8685651535945018 0.5402617417452715 40.723600112693454; 1.63136115611085e8 3.6674513226264393e8 41.5162242131367 9.51261103784203 3.3102337908777564 1.3195264032583536 54.88271813978734; 2.6612382144949841e8 6.00714480246044e8 48.9176660977687 9.562306168767872 6.121514099296015 1.3470309797101732 142.90107942301609; 4.864119890372317e8 5.744094239316741e8 32.599260426743456 7.860432781083406 0.8140165443726453 2.4427553917415294 183.0357009358574; 4.1582466975428665e8 7.595786716303501e8 39.33190577287509 7.0192544910518 5.64366078971644 3.144767575544357 266.596535240216; 8.305253184398154e8 9.6608604130316e8 35.32124661667492 6.318551371800262 15.173851592323242 2.6770012978063513 265.0477881052775; 8.210770719696262e8 1.2447023583447883e9 36.51546144760822 4.8626773064370035 12.400303537467474 4.401183505084238 425.5583097928929; 6.46891295076798e8 1.4562212411348464e9 30.343650875819314 4.499552719878954 21.7853759719829 5.157385064414578 488.6526416589398; 6.300650513255191e8 1.6162372197650745e9 27.112316423196198 1.6892544266719307 19.234179969126178 4.89378642463479 545.7020785437608; 1.3094855776897666e9 1.5910549682324748e9 28.063026246535692 2.435481225955532 23.958411232799197 5.656374754276304 680.5559497280848; 1.206046040830414e9 1.770229995711156e9 18.329236748471544 1.8796064270031911 28.89078957300679 6.525630692181351 698.4529722863598; 1.3725755698843296e9 1.6542311007818744e9 17.719067217508645 0.9302222931728099 36.281875385486146 6.8471845619794465 868.0662983870774; 1.480416487820013e9 2.261545225331275e9 18.57213191099361 0.389489986609841 34.43723847595219 5.7042903201265 1172.1712683368944; 1.47225097946838e9 2.1314912060741818e9 16.349316443640323 0.6644347282391706 44.770968812732924 7.2093221660126865 1137.9057638171785; 1.1922195103625531e9 1.9370490552729104e9 12.183480269675977 0.37136818140136657 45.53142290367991 5.963639167078912 1331.1084373144822]'

trainingset=sol_SP3_trainingset1

full_path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/estimating_parameters/SP3/estimation_with_trainingset1"


all_estimated_parameters=Array[]
all_initial_condition=Array[]

for t = 1:14
    p=zeros(6)

    tstart=tgrid_opt[t]
    tend=tgrid_opt[t+1]
    u0=[trainingset[:,t][1];trainingset[:,t][3:end]]
    push!(all_initial_condition, [u0;tstart])

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    function loss_func()
      sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, save_everystep=false, save_start=false)#, maxiters=1e7)
      l=Flux.Losses.mse(sol[1,1],trainingset[:,t+1][1])+
      Flux.Losses.mse(sol[2,1],trainingset[:,t+1][3])+
      Flux.Losses.mse(sol[3,1],trainingset[:,t+1][4])+
      Flux.Losses.mse(sol[4,1],trainingset[:,t+1][5])+
      Flux.Losses.mse(sol[5,1],trainingset[:,t+1][6])+
      Flux.Losses.mse(sol[6,1],trainingset[:,t+1][7])
      return l
    end

    epochs = 600
    learning_rate = 0.05
    data = Iterators.repeated((), epochs)
    opt = Adam(learning_rate)
    counter=0

    callback_func = function ()
      global counter=counter+1
      # println("loss: ", loss_func(), "    epoch: ",counter)
    end

    fparams = Flux.params(p)
    Flux.train!(loss_func, fparams, data, opt, cb=callback_func)

    # p = round.(p;digits=4)
    push!(all_estimated_parameters, p)
    println("\n\nParameters estimated: ", p)
    println("loss: ", loss_func(), "    epoch: ",counter, "    t=", t)

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, saveat = tgrid)

    plots=plot(sol.t,sol', title="from t"*string(t)*" to t"*string(t+1), idxs = (1,2,3,4,5,6), color=[:blue :yellow :orange :green :lightgreen :purple ], label = ["Prediction" "Prediction" "Prediction" "Prediction" "Prediction" "Prediction"], ylabel=["[Xv]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,2),size = (800, 600))
    Plots.scatter!([tgrid_opt[t]],[trainingset[:,t][1];trainingset[:,t][3:end]]' , color=:red,   labels = false, layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    Plots.scatter!([tgrid_opt[t+1]],[trainingset[:,t+1][1];trainingset[:,t+1][3:end]]' , color=:red,   labels = "Observed values", layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    display(plots)
    savefig(full_path*"/from t"*string(t)*" to t"*string(t+1))

end





println("\n\n all_estimated_parameters ")
# all_estimated_parameters = hcat(all_estimated_parameters...)'
display(all_estimated_parameters)
println("\n\n all_initial_condition")
# all_initial_condition = hcat(all_initial_condition...)'
display(all_initial_condition)

# # #
# all_estimated_parameters
# 14-element Vector{Array}:
# [-0.12384479823683966, -1.419659765800239e-9, -1.9731243561996983e-10, 1.343617916305447e-9, 4.2881980022445397e-10, 7.791569667688325e-9]
# [0.06991096843138583, -5.0243094334252736e-9, -3.37357428142468e-11, 1.9083778915290896e-9, 1.8672166626413853e-11, 5.974935511946271e-8]
# [0.08615632721532007, 6.382248486023288e-9, 6.656148969201717e-10, -2.075801104192634e-9, 4.28545561523264e-10, 1.5696946172685346e-8]
# [-0.022398896378830222, -2.1364143750830413e-9, 2.669233467957887e-10, 1.5325506089163335e-9, 2.2276290516741828e-10, 2.6515674856264656e-8]
# [0.09882781688762042, 9.557843804391054e-10, 1.6698472418933757e-10, 2.271150692482016e-9, -1.1147326166152565e-10, -3.6908312688449486e-10]
# [-0.00163449051392031, -2.0659133895356413e-10, 2.5185683217475315e-10, -4.798066049739027e-10, 2.9827254689426217e-10, 2.776736603798756e-8]
# [-0.03406267378506845, 1.206921573049669e-9, 7.1011515606648e-11, 1.8352868309323596e-9, 1.4787917343090836e-10, 1.2338331430212473e-8]
# [-0.003765028066578324, 7.230419311159237e-10, 6.288311862429151e-10, -5.708546461612815e-10, -5.89835236337222e-11, 1.2765341397320335e-8]
# [0.10450951426912303, -1.4623885760246584e-10, -1.1478496315577746e-10, 7.26687751218763e-10, 1.1730171901480368e-10, 2.074342986146188e-8]
# [-0.011755299607631888, 1.106187003738724e-9, 6.317056788365191e-11, 5.605346505492829e-10, 9.878450518100838e-11, 2.0338907938316097e-9]
# [0.018477382692314668, 6.77032411457042e-11, 1.0534099865096085e-10, 8.200838300405462e-10, 3.567971923564021e-11, 1.8819548741972758e-8]
# [0.010804929423594251, -8.547056506753694e-11, 5.417697575122086e-11, -1.8481938384455528e-10, -1.1450952240315975e-10, 3.046925713297223e-8]
# [-0.0007901358210877579, 2.1508977149918658e-10, -2.6603964009069478e-11, 9.999428515614848e-10, 1.456334037286187e-10, -3.3157021686306968e-9]
# [-0.03013940061551717, 4.48364596460283e-10, 3.1543745374930345e-11, 8.184802181773819e-11, -1.3407253963609696e-10, 2.07941385530848e-8]
#
#
# all_initial_condition
# 14-element Vector{Array}:
# [3.8819132871498865e8, 38.936369597217414, 9.154049869890251, 0.8685651535945018, 0.5402617417452715, 40.723600112693454, 0.0]
# [1.63136115611085e8, 41.5162242131367, 9.51261103784203, 3.3102337908777564, 1.3195264032583536, 54.88271813978734, 7.0]
# [2.6612382144949841e8, 48.9176660977687, 9.562306168767872, 6.121514099296015, 1.3470309797101732, 142.90107942301609, 14.0]
# [4.864119890372317e8, 32.599260426743456, 7.860432781083406, 0.8140165443726453, 2.4427553917415294, 183.0357009358574, 21.0]
# [4.1582466975428665e8, 39.33190577287509, 7.0192544910518, 5.64366078971644, 3.144767575544357, 266.596535240216, 28.0]
# [8.305253184398154e8, 35.32124661667492, 6.318551371800262, 15.173851592323242, 2.6770012978063513, 265.0477881052775, 35.0]
# [8.210770719696262e8, 36.51546144760822, 4.8626773064370035, 12.400303537467474, 4.401183505084238, 425.5583097928929, 42.0]
# [6.46891295076798e8, 30.343650875819314, 4.499552719878954, 21.7853759719829, 5.157385064414578, 488.6526416589398, 49.0]
# [6.300650513255191e8, 27.112316423196198, 1.6892544266719307, 19.234179969126178, 4.89378642463479, 545.7020785437608, 56.0]
# [1.3094855776897666e9, 28.063026246535692, 2.435481225955532, 23.958411232799197, 5.656374754276304, 680.5559497280848, 63.0]
# [1.206046040830414e9, 18.329236748471544, 1.8796064270031911, 28.89078957300679, 6.525630692181351, 698.4529722863598, 70.0]
# [1.3725755698843296e9, 17.719067217508645, 0.9302222931728099, 36.281875385486146, 6.8471845619794465, 868.0662983870774, 77.0]
# [1.480416487820013e9, 18.57213191099361, 0.389489986609841, 34.43723847595219, 5.7042903201265, 1172.1712683368944, 84.0]
# [1.47225097946838e9, 16.349316443640323, 0.6644347282391706, 44.770968812732924, 7.2093221660126865, 1137.9057638171785, 91.0]
