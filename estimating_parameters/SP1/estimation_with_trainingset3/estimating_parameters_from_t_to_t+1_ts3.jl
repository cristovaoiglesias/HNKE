# using DifferentialEquations, DiffEqFlux, Plots, Statistics
# using XLSX, DataFrames, Optim, BlackBoxOptim,DiffEqParamEstim, CSV, Tables
# using Flux
# using BSON: @save
# using BSON#: @load
# using OrdinaryDiffEq, Optimization, OptimizationOptimJL, OptimizationOptimisers
# using Random, ComponentArrays, Lux

# using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL
# using OptimizationOptimisers, Random, Plots, DifferentialEquations

using Flux, DiffEqFlux, DifferentialEquations, Plots

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end
tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]


sol_SP1_trainingset3=[2.0e8 2.0e8 100.0 4.9 0.0 0.31 80.6; 1.8163074081317115e8 1.9982894102706343e8 98.07528950110748 4.501390570791136 1.9147110166885117 0.3484422930257737 20.76477376695246; 3.460965503958397e8 4.638535445685336e8 99.17142341605957 3.9964787987379364 1.372882504338677 1.30719331141717 55.438878198978415; 3.887998890891647e8 6.240310072905114e8 96.35562978029012 3.3309229913759224 6.22517535461961 1.463495346581877 240.6201284736461; 3.5497615718166274e8 6.570914381733414e8 91.8354974420228 2.486363209586303 7.874264993252571 1.8203226952725156 389.7129972577119; 1.0861810495731046e9 1.1981746762416918e9 90.85941482910016 1.9225365767407154 11.963684552484505 2.3345364519079754 364.42230733151166; 1.1879070146519234e9 1.4732688082124815e9 90.69853803369914 1.0341878347898086 16.657647828026768 2.8014009946090948 574.7633794220075; 1.2157495834781635e9 1.6693585102597787e9 87.9077846059793 0.6784103109950237 21.024528195684397 3.1312556283515156 553.192150421171; 1.4184808557126749e9 1.781350164635594e9 86.73798802557698 0.09983806303716235 25.303895354310857 2.7815621291751476 645.4548178806735; 1.2382863121231318e9 1.9524033867133408e9 82.59874928311027 0.3409591503299274 25.225002095537732 3.1915625733166046 738.6368154567417; 9.498968645940009e8 1.631615165546898e9 82.93431919049915 0.32977859171286367 23.592997556873144 3.272750536363161 708.939574056238; 9.64930813695922e8 1.2816251653568723e9 81.70337908166529 0.2818271916309288 24.115726741278657 2.9902692174233194 954.5373106940793; 6.463607391042804e8 9.036410667090979e8 82.33388881578851 0.18823124137182032 19.7848079157891 3.3750959143903043 919.9804561088139; 6.621087321930434e8 7.809052810194516e8 82.25670141387539 0.2968689226436318 24.663339907179818 3.1652591720784082 1047.6588507047686; 6.58768846704275e8 8.429715012269596e8 83.24068645509224 0.3300498691873629 24.77114961989348 3.111872710723535 1231.864002031305]'


trainingset=sol_SP1_trainingset3

full_path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/estimating_parameters/SP1/estimation_with_trainingset3"


all_estimated_parameters=Array[]
all_initial_condition=Array[]

for t = 1:14
    p=zeros(6)

    tstart=tgrid_opt[t]
    tend=tgrid_opt[t+1]
    u0=[trainingset[:,t][1];trainingset[:,t][3:end]]
    push!(all_initial_condition, [u0;tstart])

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    function loss_func()
      sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, save_everystep=false, save_start=false)#, maxiters=1e7)
      l=Flux.Losses.mse(sol[1,1],trainingset[:,t+1][1])+
      Flux.Losses.mse(sol[2,1],trainingset[:,t+1][3])+
      Flux.Losses.mse(sol[3,1],trainingset[:,t+1][4])+
      Flux.Losses.mse(sol[4,1],trainingset[:,t+1][5])+
      Flux.Losses.mse(sol[5,1],trainingset[:,t+1][6])+
      Flux.Losses.mse(sol[6,1],trainingset[:,t+1][7])
      return l
    end

    epochs = 600
    learning_rate = 0.05
    data = Iterators.repeated((), epochs)
    opt = Adam(learning_rate)
    counter=0

    callback_func = function ()
      global counter=counter+1
      # println("loss: ", loss_func(), "    epoch: ",counter)
    end

    fparams = Flux.params(p)
    Flux.train!(loss_func, fparams, data, opt, cb=callback_func)

    # p = round.(p;digits=4)
    push!(all_estimated_parameters, p)
    println("\n\nParameters estimated: ", p)
    println("loss: ", loss_func(), "    epoch: ",counter, "    t=", t)

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, saveat = tgrid)

    plots=plot(sol.t,sol', title="from t"*string(t)*" to t"*string(t+1), idxs = (1,2,3,4,5,6), color=[:blue :yellow :orange :green :lightgreen :purple ], label = ["Prediction" "Prediction" "Prediction" "Prediction" "Prediction" "Prediction"], ylabel=["[Xv]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,2),size = (800, 600))
    Plots.scatter!([tgrid_opt[t]],[trainingset[:,t][1];trainingset[:,t][3:end]]' , color=:red,   labels = false, layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    Plots.scatter!([tgrid_opt[t+1]],[trainingset[:,t+1][1];trainingset[:,t+1][3:end]]' , color=:red,   labels = "Observed values", layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    display(plots)
    savefig(full_path*"/from t"*string(t)*" to t"*string(t+1))

end





println("\n\n all_estimated_parameters ")
# all_estimated_parameters = hcat(all_estimated_parameters...)'
display(all_estimated_parameters)
println("\n\n all_initial_condition")
# all_initial_condition = hcat(all_initial_condition...)'
display(all_initial_condition)
# #
# all_estimated_parameters
# 14-element Vector{Array}:
# [-0.013763091016144592, 1.4420803236991672e-9, 2.9865544695221253e-10, 1.4345882532630592e-9, 2.8801718729732855e-11, -4.483129328677217e-8]
# [0.0921060082059781, -6.138682993303038e-10, 2.8276536867659146e-10, -3.034399003212689e-10, 5.369295712747099e-10, 1.9418584220649138e-8]
# [0.01662100054135614, 1.0959646531157226e-9, 2.590487302915118e-10, 1.8886112138480413e-9, 6.083689294053007e-11, 7.207627781561082e-8]
# [-0.01300202328211036, 1.7375617820597463e-9, 3.246520509635763e-10, 6.339176269316119e-10, 1.3716509748682168e-10, 5.73120941948342e-8]
# [0.15976753785780293, 2.1327417579415412e-10, 1.2319665636242082e-10, 8.935351855344697e-10, 1.1235629251846473e-10, -5.525991561548718e-9]
# [0.01278928963561752, 2.0224337283796487e-11, 1.1168426513023444e-10, 5.901373962844124e-10, 5.86940231908422e-11, 2.64447010303122e-8]
# [0.0033096971878134244, 3.317407849395719e-10, 4.229073627650482e-11, 5.190978831058331e-10, 3.920923482302052e-11, -2.5642103382487284e-9]
# [0.02203223589944444, 1.2712895401223313e-10, 6.287643974412117e-11, 4.650679003323027e-10, -3.800257332027413e-11, 1.0026833118222963e-8]
# [-0.019408294529533784, 4.4582809910674685e-10, -2.5971792385227833e-11, -8.498646894273772e-12, 4.4161357021350553e-11, 1.0036396463442699e-8]
# [-0.03787575478985718, -4.4073054538747975e-11, 1.4692369032019143e-12, -2.1434086640247975e-10, 1.0663690120437825e-11, -3.9003010796068995e-9]
# [0.0022432840001377816, 1.8367257163754006e-10, 7.1534398580566925e-12, 7.799719488037136e-11, -4.214871694467179e-11, 3.664675496617944e-8]
# [-0.05724266841605425, -1.1329418798070629e-10, 1.6818152830849148e-11, -7.782068951907626e-10, 6.914831942463014e-11, -6.2093925500096025e-9]
# [0.003438860412154474, 1.6854172337984147e-11, -2.3721912248012738e-11, 1.0653149978474747e-9, -4.582056588587124e-11, 2.7880896116727466e-8]
# [-0.0007224401759192874, -2.1284163035107808e-10, -7.176172740699102e-12, 2.331888755569306e-11, -1.1546764404290429e-11, 3.984483860963827e-8]
#
#
# all_initial_condition
# 14-element Vector{Array}:
# [2.0e8, 100.0, 4.9, 0.0, 0.31, 80.6, 0.0]
# [1.8163074081317115e8, 98.07528950110748, 4.501390570791136, 1.9147110166885117, 0.3484422930257737, 20.76477376695246, 7.0]
# [3.460965503958397e8, 99.17142341605957, 3.9964787987379364, 1.372882504338677, 1.30719331141717, 55.438878198978415, 14.0]
# [3.887998890891647e8, 96.35562978029012, 3.3309229913759224, 6.22517535461961, 1.463495346581877, 240.6201284736461, 21.0]
# [3.5497615718166274e8, 91.8354974420228, 2.486363209586303, 7.874264993252571, 1.8203226952725156, 389.7129972577119, 28.0]
# [1.0861810495731046e9, 90.85941482910016, 1.9225365767407154, 11.963684552484505, 2.3345364519079754, 364.42230733151166, 35.0]
# [1.1879070146519234e9, 90.69853803369914, 1.0341878347898086, 16.657647828026768, 2.8014009946090948, 574.7633794220075, 42.0]
# [1.2157495834781635e9, 87.9077846059793, 0.6784103109950237, 21.024528195684397, 3.1312556283515156, 553.192150421171, 49.0]
# [1.4184808557126749e9, 86.73798802557698, 0.09983806303716235, 25.303895354310857, 2.7815621291751476, 645.4548178806735, 56.0]
# [1.2382863121231318e9, 82.59874928311027, 0.3409591503299274, 25.225002095537732, 3.1915625733166046, 738.6368154567417, 63.0]
# [9.498968645940009e8, 82.93431919049915, 0.32977859171286367, 23.592997556873144, 3.272750536363161, 708.939574056238, 70.0]
# [9.64930813695922e8, 81.70337908166529, 0.2818271916309288, 24.115726741278657, 2.9902692174233194, 954.5373106940793, 77.0]
# [6.463607391042804e8, 82.33388881578851, 0.18823124137182032, 19.7848079157891, 3.3750959143903043, 919.9804561088139, 84.0]
# [6.621087321930434e8, 82.25670141387539, 0.2968689226436318, 24.663339907179818, 3.1652591720784082, 1047.6588507047686, 91.0]
