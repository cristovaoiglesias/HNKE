# using DifferentialEquations, DiffEqFlux, Plots, Statistics
# using XLSX, DataFrames, Optim, BlackBoxOptim,DiffEqParamEstim, CSV, Tables
# using Flux
# using BSON: @save
# using BSON#: @load
# using OrdinaryDiffEq, Optimization, OptimizationOptimJL, OptimizationOptimisers
# using Random, ComponentArrays, Lux

# using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL
# using OptimizationOptimisers, Random, Plots, DifferentialEquations

using Flux, DiffEqFlux, DifferentialEquations, Plots

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end
tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]



sol_SP1_trainingset2=[1.4133262541603398e8 3.8678176405167437e8 98.6201803325879 5.163188729698149 2.410160187352323 1.0573415391093148 199.34153915035387; 3.814880034490456e8 7.228097610999309e8 99.71416114904532 4.277070048407872 4.735566365352588 0.77496936018366 115.47568046567551; 3.036385778386307e8 4.686689782968824e8 99.65717133983777 3.515940484197669 2.471012754531722 1.857532802143966 204.01584431581668; 3.300332621270375e8 4.2923363906231374e8 92.59429030143843 3.453680436264069 3.153873929401559 1.3088518212287164 164.39709536918113; 8.418831558615768e8 8.355391188002397e8 94.46744282865527 2.891160286221575 12.022676607307513 1.795677603495496 347.9905860019382; 8.806226056444972e8 9.327639585190061e8 89.09885591116122 1.6984199741619954 9.66916284701048 1.8602791927428441 359.9597122823444; 9.779153922805892e8 1.4294231533063388e9 86.00222000718577 1.29880276525245 16.620106477044004 3.298498526830816 379.0949573389431; 1.3073691821105907e9 1.4645208214058933e9 87.32039196142739 0.4850351455886992 23.52497104350894 2.7248225570691296 521.6684700348824; 1.3136410849895272e9 1.8971940293088002e9 84.55502207133736 0.24561287738423923 24.31091304418043 3.8912040483386474 925.329099501592; 1.162415650502403e9 1.6919174420196557e9 79.99744401274955 0.5277659363709937 23.64742609313089 3.441451492563838 802.6006124181971; 1.1210418298709178e9 1.460076252254265e9 80.1115779585362 0.12006379414766527 28.5134820444138 3.029392475150569 922.962968110784; 9.161086494174026e8 1.1897383776312954e9 81.68526285422602 0.8494566033099545 25.763564333900366 2.434009631970331 878.3066281498656; 6.473885744275454e8 1.1716315854850461e9 82.57531450606653 0.0921615991731477 24.84866882571528 3.3510737756651108 1103.2946329392237; 6.623939511473671e8 8.488150093098371e8 80.80969565372736 0.003982480519577491 25.64065595679369 3.4236108701752497 1264.5865203959454; 5.003474517933579e8 8.703203588441116e8 81.96162831782671 0.06538645427227688 27.294916619770138 3.0656269006378345 1219.1553845499889]'


trainingset=sol_SP1_trainingset2

full_path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/estimating_parameters/SP1/estimation_with_trainingset2"


all_estimated_parameters=Array[]
all_initial_condition=Array[]

for t = 1:14
    p=zeros(6)

    tstart=tgrid_opt[t]
    tend=tgrid_opt[t+1]
    u0=[trainingset[:,t][1];trainingset[:,t][3:end]]
    push!(all_initial_condition, [u0;tstart])

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    function loss_func()
      sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, save_everystep=false, save_start=false)#, maxiters=1e7)
      l=Flux.Losses.mse(sol[1,1],trainingset[:,t+1][1])+
      Flux.Losses.mse(sol[2,1],trainingset[:,t+1][3])+
      Flux.Losses.mse(sol[3,1],trainingset[:,t+1][4])+
      Flux.Losses.mse(sol[4,1],trainingset[:,t+1][5])+
      Flux.Losses.mse(sol[5,1],trainingset[:,t+1][6])+
      Flux.Losses.mse(sol[6,1],trainingset[:,t+1][7])
      return l
    end

    epochs = 600
    learning_rate = 0.05
    data = Iterators.repeated((), epochs)
    opt = Adam(learning_rate)
    counter=0

    callback_func = function ()
      global counter=counter+1
      # println("loss: ", loss_func(), "    epoch: ",counter)
    end

    fparams = Flux.params(p)
    Flux.train!(loss_func, fparams, data, opt, cb=callback_func)

    # p = round.(p;digits=4)
    push!(all_estimated_parameters, p)
    println("\n\nParameters estimated: ", p)
    println("loss: ", loss_func(), "    epoch: ",counter, "    t=", t)

    prob = ODEProblem(ode_system!, u0, (tstart,tend), p)
    sol = solve(prob, AutoTsit5(Rosenbrock23()), p=p, saveat = tgrid)

    plots=plot(sol.t,sol', title="from t"*string(t)*" to t"*string(t+1), idxs = (1,2,3,4,5,6), color=[:blue :yellow :orange :green :lightgreen :purple ], label = ["Prediction" "Prediction" "Prediction" "Prediction" "Prediction" "Prediction"], ylabel=["[Xv]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,2),size = (800, 600))
    Plots.scatter!([tgrid_opt[t]],[trainingset[:,t][1];trainingset[:,t][3:end]]' , color=:red,   labels = false, layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    Plots.scatter!([tgrid_opt[t+1]],[trainingset[:,t+1][1];trainingset[:,t+1][3:end]]' , color=:red,   labels = "Observed values", layout=(3,2))#,size = (600, 1000)),title = ["p 1" "p 2" "p 3" "p 4" "p 5" "p 6"],
    display(plots)
    savefig(full_path*"/from t"*string(t)*" to t"*string(t+1))

end





println("\n\n all_estimated_parameters ")
# all_estimated_parameters = hcat(all_estimated_parameters...)'
display(all_estimated_parameters)
println("\n\n all_initial_condition")
# all_initial_condition = hcat(all_initial_condition...)'
display(all_initial_condition)
#
# all_estimated_parameters
# 14-element Vector{Array}:
# [0.1418519122529782, -6.461784505478557e-10, 5.234010986605693e-10, 1.3735410594977406e-9, -1.6678782365533143e-10, -4.9536814386842305e-8]
# [-0.03260590020862933, 2.3870555105466027e-11, 3.187874463299782e-10, -9.484708903743052e-10, 4.534145275121008e-10, 3.708353439091836e-8]
# [0.01190790546797384, 3.186402283873179e-9, 2.8087069323034797e-11, 3.0806994284798326e-10, -2.475348348003945e-10, -1.7873912588673436e-8]
# [0.13377826495000775, -4.895705105699081e-10, 1.470206193854313e-10, 2.3179697166460068e-9, 1.272369654055484e-10, 4.798441584489865e-8]
# [0.006426846981350418, 8.906461220245446e-10, 1.9787616010752696e-10, -3.904476440512185e-10, 1.0718753745272672e-11, 1.9856708763164217e-9]
# [0.014970570229316096, 4.76483067580774e-10, 6.148922085757565e-11, 1.0695505137271502e-9, 2.2130030853420347e-10, 2.9443651480845896e-9]
# [0.04147842622685831, -1.6595976226775094e-10, 1.0245495939023395e-10, 8.693276533732659e-10, -7.222727922501841e-11, 1.795009037784841e-8]
# [0.000683696547846615, 3.01450426076623e-10, 2.6098319633905544e-11, 8.567412328219018e-11, 1.2714561469497116e-10, 4.400281352279834e-8]
# [-0.01747177696556801, 5.26559240769277e-10, -3.259952904071874e-11, -7.66568050807016e-11, -5.196307748958729e-11, -1.417939332440828e-8]
# [-0.00517740556616534, -1.4283757848617944e-11, 5.10200705961735e-11, 6.089261444041235e-10, -5.156527791604838e-11, 1.5061813888997106e-8]
# [-0.028839823880660295, -2.214624909835163e-10, -1.0264700671120602e-10, -3.8699130943430056e-10, -8.378806054843893e-11, -6.284395695018754e-9]
# [-0.04959832701929353, -1.6428025352333126e-10, 1.3977703162130485e-10, -1.688657453645586e-10, 1.69266015769378e-10, 4.152659218667369e-8]
# [0.0032733969097602845, 3.851654765112985e-10, 1.923490754844848e-11, 1.7276940494667598e-10, 1.5822627107254685e-11, 3.518554432926584e-8]
# [-0.040079673058803014, -2.849134177416444e-10, -1.5188162671487117e-11, 4.091564099942869e-10, -8.854259682792606e-11, -1.1236683397065532e-8]
#
#
# all_initial_condition
# 14-element Vector{Array}:
# [1.4133262541603398e8, 98.6201803325879, 5.163188729698149, 2.410160187352323, 1.0573415391093148, 199.34153915035387, 0.0]
# [3.814880034490456e8, 99.71416114904532, 4.277070048407872, 4.735566365352588, 0.77496936018366, 115.47568046567551, 7.0]
# [3.036385778386307e8, 99.65717133983777, 3.515940484197669, 2.471012754531722, 1.857532802143966, 204.01584431581668, 14.0]
# [3.300332621270375e8, 92.59429030143843, 3.453680436264069, 3.153873929401559, 1.3088518212287164, 164.39709536918113, 21.0]
# [8.418831558615768e8, 94.46744282865527, 2.891160286221575, 12.022676607307513, 1.795677603495496, 347.9905860019382, 28.0]
# [8.806226056444972e8, 89.09885591116122, 1.6984199741619954, 9.66916284701048, 1.8602791927428441, 359.9597122823444, 35.0]
# [9.779153922805892e8, 86.00222000718577, 1.29880276525245, 16.620106477044004, 3.298498526830816, 379.0949573389431, 42.0]
# [1.3073691821105907e9, 87.32039196142739, 0.4850351455886992, 23.52497104350894, 2.7248225570691296, 521.6684700348824, 49.0]
# [1.3136410849895272e9, 84.55502207133736, 0.24561287738423923, 24.31091304418043, 3.8912040483386474, 925.329099501592, 56.0]
# [1.162415650502403e9, 79.99744401274955, 0.5277659363709937, 23.64742609313089, 3.441451492563838, 802.6006124181971, 63.0]
# [1.1210418298709178e9, 80.1115779585362, 0.12006379414766527, 28.5134820444138, 3.029392475150569, 922.962968110784, 70.0]
# [9.161086494174026e8, 81.68526285422602, 0.8494566033099545, 25.763564333900366, 2.434009631970331, 878.3066281498656, 77.0]
# [6.473885744275454e8, 82.57531450606653, 0.0921615991731477, 24.84866882571528, 3.3510737756651108, 1103.2946329392237, 84.0]
# [6.623939511473671e8, 80.80969565372736, 0.003982480519577491, 25.64065595679369, 3.4236108701752497, 1264.5865203959454, 91.0]
