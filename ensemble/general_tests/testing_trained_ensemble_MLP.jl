using  Plots,Distributions,DifferentialEquations
using BSON#: @load
using Statistics
using DataFrames
using Flux


path="/Users/cristovao/PhD_courses/Thesis/BHM_NSE_vs_EnMLP_NSE/ensemble/trained_Ensemble_MLP/"

#load all trained sub-MLP that compose the ensemble
ensemble_MLP = Dict()
ensemble_size=100
for i=1:ensemble_size
    pt=path*"$(i)_sub_MLP.bson"
    m = BSON.load(pt, @__MODULE__)
    ensemble_MLP[i]=m[:model]
end


function normalize_data(x,min,max)
    y=(x-min)/(max-min)
    return y
end

function inverse_normalizetion(y,min,max)
    x=(y*(max-min))+min
    return x
end

function normalize_input(u0)
    #the max and min values were obtained from the dataset used to train the Ensemble, see file dataset_to_train_EnMLP.jl
    min_values_state_variables=[1.1247355623692597e8, 1.0876934495531811, 0.0016493210047543638, 0.0, 0.002675178467605843, 13.163672825054604, 0.0]
    max_values_state_variables=[3.9843740973885384e9, 100.72750841246663, 25.078825296718655, 124.32540101966985, 16.566031188582603, 4632.744925522347, 91.0]
    for i=1:7
        u0[i]=normalize_data(u0[i],min_values_state_variables[i],max_values_state_variables[i])
    end
    return u0
end


function unnormalize_output(p)
    #the max and min values were obtained from the dataset used to train the Ensemble, see file dataset_to_train_EnMLP.jl
    min_values_estimated_params=[-0.13240732597403193, -5.0243094334252736e-9, -7.242819067849792e-10, -2.075801104192634e-9, -4.1946626959321127e-10, -7.189692896472483e-8]
    max_values_estimated_params=[0.2247201064149725, 6.382248486023288e-9, 9.252830910761743e-10, 3.860459201515955e-9, 1.0219287122168513e-9, 1.2732423754124306e-7]
    for i=1:6
        p[i]=inverse_normalizetion(p[i],min_values_estimated_params[i],max_values_estimated_params[i])
    end
    return p
end


function ensemble_prediction(ensemble,inpt)
    #the input is normalized and the output is unnromalized.
    row_prediction=[]
    u0=normalize_input(inpt)
    for j=1:length(ensemble)
        p=ensemble[j](u0)
        # println(p)
        p=unnormalize_output(p)
        push!(row_prediction,p)
    end
    rp=vcat(map(x->x', row_prediction)...)
    rp_mean= [mean(rp[:,1]),mean(rp[:,2]),mean(rp[:,3]),mean(rp[:,4]),mean(rp[:,5]),mean(rp[:,6])]
    rp_std = [std(rp[:,1]),std(rp[:,2]),std(rp[:,3]),std(rp[:,4]),std(rp[:,5]),std(rp[:,6])]
    return rp_mean,rp_std #return mean and std
end

#
# u0=[2.0e8, 29.1, 4.9, 0.0, 0.31, 80.6, 0.0]
# p=ensemble_prediction(ensemble_MLP,u0)





 ytest=[[0.025649080913742482, 8.927376770802995e-10, 1.1268083882662348e-10, -1.14198478764008e-10, 5.063086153189999e-10, -2.2005281227689823e-8],
 [0.06191276202255822, 1.8448785388628232e-9, 3.469616611409715e-10, 2.6157094965231086e-10, -2.2897714060819297e-10, -5.319087360502091e-9],
 [0.05397864140192608, -2.646980512005367e-10, 2.1713843168519e-10, 2.1925865665928306e-10, 3.4603526668192053e-10, 2.947077889258591e-8],
 [-0.025881908643024268, 3.881765821542538e-10, 2.587680242993214e-11, 1.0236289296849868e-9, -5.695998218524636e-11, 6.221592221379952e-8],
 [0.06954282271147261, 8.928821036409446e-10, 3.225615225429165e-10, 9.71848907923389e-10, -1.71041744475493e-11, -1.8720202639544795e-8],
 [0.05699734257591693, 6.449593798680048e-10, 3.565519906994555e-11, 9.448325745697004e-10, 1.9985083949017202e-10, -3.650463538438916e-9],
 [-0.003927427423509276, -3.21599149153099e-10, 8.896549358229496e-11, 4.637790650346114e-10, -1.6600693953034985e-11, 2.610183273986691e-8],
 [0.05226931927512667, 7.710865784409374e-10, 4.479969495716445e-11, 4.116062003000352e-10, 1.0565037912442706e-10, 3.119010223407902e-8],
 [-0.04537015280425088, -1.3217848352678373e-10, 2.532564228373549e-11, 4.142577244309637e-10, -1.4638826872483768e-11, 3.2039530666988203e-9],
 [-0.025471616205087276, -1.3548784823909062e-10, -2.6868888890324357e-11, 2.450685629253694e-10, 2.846314182926537e-11, 1.3794747372270318e-8],
 [-0.0543137306543838, 1.3967188574825268e-10, 2.608559004354041e-11, -8.808387170985888e-10, -2.111905655148083e-11, -2.613483046336825e-9],
 [0.007141069726763664, 5.539912094143459e-10, -1.0553447791452251e-10, 1.2913492307714137e-10, -7.889644292254775e-11, -9.621074931456805e-10],
 [-0.03805478759886589, -1.1467785613196542e-10, 1.2494112437315724e-10, 4.6225286746047156e-10, -6.771099040819185e-11, 4.255996146569576e-8],
 [0.008965126867513497, -1.689568919675393e-11, -6.568181219828812e-11, -9.82330928359539e-10, 1.4713496549609643e-10, 2.7555105890595132e-8]]



 xtest=[[2.205841592557993e8, 100.72750841246663, 4.9713482419119766, 0.2671396783756082, 0.021514015238271567, 100.60922257316341, 0.0],
  [2.6396667473759595e8, 99.2175437067149, 4.780761332807146, 0.07398585319684914, 0.8778777280055013, 63.38978155056393, 7.0],
  [4.071624303515834e8, 94.95059330585138, 3.9782879177341597, 0.6789622247738918, 0.3482863814535705, 51.08746103977444, 14.0],
  [5.941089307159216e8, 95.86733473102815, 3.226261724289963, 1.4383314825968974, 1.5467264079442642, 153.15485133076268, 21.0],
  [4.9565956379776293e8, 94.3907892073811, 3.1278287827083027, 5.332004822610516, 1.3300595520500016, 389.81120910973414, 28.0],
  [8.064880514152669e8, 90.39997005622335, 1.6861135759609207, 9.675773874131863, 1.2536160130020813, 306.13942700113176, 35.0],
  [1.2019138965688155e9, 85.92549703277703, 1.4387607963519708, 16.230652862046448, 2.6400955825521257, 280.8139113096503, 42.0],
  [1.1693209645071886e9, 88.59437571167494, 0.7004621419202275, 20.07945413128332, 2.502337878637426, 497.42777518075104, 49.0],
  [1.6859149982726007e9, 80.9734980580663, 0.25770496146233984, 24.147474751798047, 3.546501406585847, 805.6893005126789, 56.0],
  [1.2271781924950643e9, 82.30994087035812, 0.0016493210047543638, 28.336015737318668, 3.398499966126689, 838.0844013430267, 63.0],
  [1.0267680649142337e9, 83.37596438669982, 0.21306120509988738, 30.264217956183998, 3.622455398001426, 946.6211845416598, 70.0],
  [7.020293783221964e8, 82.54087940226695, 0.05710218066544668, 24.99773891371841, 3.496190993016747, 930.9953242364337, 77.0],
  [7.380139602131093e8, 79.74926894746896, 0.5888932251177958, 25.648455018996394, 3.0986317357136435, 926.1471740201077, 84.0],
  [5.654258889051758e8, 80.26935822089374, 0.022257438551802372, 27.74488473799487, 2.791549058359265, 1119.16734269183, 91.0]]






  u0=[2.0e8, 29.1, 4.9, 0.0, 0.31, 80.6, 0.0]
  p=ensemble_prediction(ensemble_MLP,u0)


for i=1:14
    p=ensemble_prediction(ensemble_MLP,xtest[i])
    println(p)
end





















sol_SPN_testingset1=[3.6320008991478646e8 3.9714333547558784e8 4.380118651472328e8 2.3099172908308578e8 7.13729015489268e8 9.20496865537368e8 1.0878506223072157e9 1.3507814148902016e9 1.307739914145754e9 1.3419300184944696e9 1.012881548192765e9 7.72729271058243e8 7.227034864444705e8 7.060915689415284e8 5.734037541518745e8; 5.804315740406934e8 1.5044253990665463e8 4.234056599357851e8 6.579132249165208e8 7.033296399479147e8 8.388230420514773e8 1.3397246409889848e9 1.5681231394547198e9 1.6043643206010027e9 1.8415899194894361e9 1.5153243967969272e9 1.5422806026418595e9 1.2793525548917942e9 7.772910068098698e8 8.974616698843764e8; 28.497291405785344 29.497868186283487 26.74829263797663 19.889463215472247 27.414327631969986 16.188369667779064 19.331820670636834 14.203351689046015 12.070407370287624 11.98399219128823 10.469088709001337 12.497223392119706 10.66755181894824 14.343661989031641 10.343315526245393; 4.873418768673552 4.173958582884101 3.728799856476061 3.0601741044408395 2.592863335212839 2.615233422962437 1.2782991928819532 0.6520047831620861 0.02082923828446201 0.5401372308555539 0.2472216784346681 0.19296288598514613 0.2247322787263362 0.6156789301675722 0.19945870403711455; 2.9471089418951237 4.881254750599023 2.068246964408017 5.561978856925664 7.902747515131178 9.136267731320556 19.294997645677675 20.4120325493498 24.91153824384828 22.61919630678117 22.15894188217364 28.995460645474495 20.752911616017734 26.643767728054748 23.715001909742153; 0.41053380648945065 0.07245625844779557 1.00234821711578 1.0851387835719901 1.716433169077 2.5031432290964997 2.9614686873248535 2.843475627112798 3.415373004303232 3.2764559601458436 2.5557607090890215 3.508573048990084 2.5225785076904126 3.8214463203881532 2.9579943858872437; 22.5356383543335 85.5350152123526 150.39795059733933 99.99169285678953 225.97113778652317 196.78370060714204 496.3207811284528 537.1455895540505 603.8430080544445 748.8542438122906 933.6256525443919 1252.9007532825858 1106.1656253840015 1246.98942511289 1223.5155843063624]'
sol_SPN_testingset1[1,:]=[2.0e8, 29.1, 4.9, 0.0, 0.31, 80.6, 0.0]


sol_SPN_trainingset1=[2.4445259281844485e8 1.6564223476446635e8 33.74952720254497 5.139062262525559 1.5783812811037112 0.09531671978388118 28.86266232140354; 3.396325913932981e8 2.1975461024354476e8 30.375377537229326 4.355571739860554 1.7698160683231383 0.9559814163465556 150.9683637002025; 1.925462156304023e8 5.691110037334551e8 23.743347891022513 3.8492033693535306 5.3632894521199646 1.2186240634420904 84.9430721943757; 9.283195093991194e8 5.834638178723078e8 26.613358421344145 3.4266248520010416 7.8521202736084525 1.3409830680862749 207.9531264009106; 5.525560045300707e8 5.980079429584424e8 23.940834493503903 2.1881037636138467 11.065370022287514 1.0501575765649303 286.5860713564228; 1.0079914278203977e9 1.1654186730096722e9 21.28118960369631 2.066165222156412 9.52291903850498 2.1806230127826 111.93247173574943; 1.072369763975047e9 1.1351778039138393e9 15.822812349802081 1.4824427596876795 15.788517696985483 2.768002186229957 408.29436822135057; 1.192771485837667e9 1.3921199362927597e9 17.154021575289445 0.7169996491801401 24.478054149833238 3.166999239447984 551.1680663627948; 1.3621758509196446e9 1.703806257699498e9 11.966234284296142 0.056423160999699976 28.24196074260893 3.6288932552977715 731.5438144618658; 1.2925887664939604e9 1.5395943981777983e9 14.769421501658897 0.26206272131741215 28.012150428503496 3.220420651596536 864.1204111534144; 9.698066291612679e8 1.5081064206609604e9 11.9108580462937 0.5215165798889059 23.89743463812208 3.0055545524602794 1018.966756039457; 8.835645788096658e8 1.2060134172083497e9 12.96907822023761 0.1514646872129411 24.433983674985388 2.9161937589760423 1022.4793372740894; 7.708372616848432e8 1.1589839739480634e9 9.617649483532638 0.21588119419337715 22.743242569978264 3.1456234516865806 1128.6298554718699; 8.76601179094303e8 8.078472804617661e8 12.672320414070091 0.26469348331981074 20.964849285696864 3.153107484379107 1220.3586369023133; 4.6584261475269645e8 1.1251701167518518e9 9.11889078753297 0.07909151331644906 23.994123634738003 3.1790796139044954 1289.3877580260246]'


tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend
sampling= 0.125
tgrid_large=tstart:sampling:tend
tgrid_opt=[0.0, 7.0, 14.0, 21.0, 28.0, 35.0, 42.0, 49.0, 56.0, 63.0, 70.0, 77.0, 84.0, 91.0, 98.0]

function ode_system!(du, u, p, t)
    Xv, GLC, GLN, LAC, AMM, mAb = u
    μ_Xv, μ_GLC, μ_GLN, μ_LAC, μ_AMM, μ_mAb = p
    du[1] = μ_Xv*Xv  #dXv
    du[2] = -μ_GLC*Xv #dGLC
    du[3] = -μ_GLN*Xv #dGLN
    du[4] = μ_LAC*Xv #+ klac1*GLC + klac2*GLN   #dLAC
    du[5] = μ_AMM*Xv  #- klac1*GLC  #μ_AMM*Xv - kdeg*du[3] #dAMM #(eq10: dAMM)
    du[6] = μ_mAb*Xv
end

# ODE system for mAb production used in "Bioprocess optimization under uncertainty using ensemble modeling (2017)"
function ode_system2!(du, u, p, t)
    Xv, Xt, GLC, GLN, LAC, AMM, MAb = u
    mu_max, Kglc, Kgln, KIlac, KIamm, mu_dmax, Kdamm, Klysis, Yxglc, mglc, Yxgln, alpha1, alpha2, Kdgln, Ylacglc, Yammgln, r1, r2 ,lambda = p

    mu = mu_max*(GLC/(Kglc+GLC))*(GLN/(Kgln+GLN))*(KIlac/(KIlac+LAC))*(KIamm/(KIamm+AMM));
    mu_d = mu_dmax/(1+(Kdamm/AMM)^2);

    du[1] = mu*Xv-mu_d*Xv;  #viable cell density XV
    du[2] = mu*Xv-Klysis*(Xt-Xv); #total cell density Xt
    du[3] = -(mu/Yxglc+mglc)*Xv;
    du[4] = -(mu/Yxgln+alpha1*GLN/(alpha2+GLN))*Xv - Kdgln*GLN;
    du[5] = Ylacglc*(mu/Yxglc+mglc)*Xv;
    du[6] = Yammgln*(mu/Yxgln+alpha1*GLN/(alpha2+GLN))*Xv+Kdgln*GLN;
    du[7] = (r2-r1*mu)*lambda*Xv;
end
#parameters from the paper "Bioprocess optimization under uncertainty using ensemble modeling (2017)"
p = [5.8e-2, 0.75, 0.075, 171.756, 28.484, 3e-2, 1.76, 0.05511, 1.061e8, 4.853e-14, 5.57e8, 3.4e-13, 4, 9.6e-3, 1.399, 4.27e-1, 0.1, 2, 7.21e-9 ]

u0 = [2e8   2e8   29.1   4.9  0.0  0.310  80.6; #SPN initial condition from "Bioprocess optimization under uncertainty using ensemble modeling(2017)"
      2e8   2e8   100    4.9  0.0  0.310  80.6; #SP1 In-silico Optimization of a Batch Bioreactor for mAbs Production in Relationship to the Net Evolution of the Hybridoma Cell Culture (2019)
      2e8   2e8   29.1   9.0  0.0  0.310  80.6; #SP2 In-silico Optimization of a Batch Bioreactor for mAbs Production in Relationship to the Net Evolution of the Hybridoma Cell Culture (2019)
      2e8   2e8   45.0   10   0.0  0.310  80.6; #SP3 In-silico Optimization of a Batch Bioreactor for mAbs Production in Relationship to the Net Evolution of the Hybridoma Cell Culture (2019)
      2e9   2e8   100    25   0.0  0.310  80.6] #SP4  In-silico Optimization of a Batch Bioreactor for mAbs Production in Relationship to the Net Evolution of the Hybridoma Cell Culture (2019)

prob =  ODEProblem(ode_system2!, u0[1,:], (tstart,tend), p)
sol_SPN_gt = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid)
sol_SPN_gt_7min = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid_large)
prob =  ODEProblem(ode_system2!, u0[2,:], (tstart,tend), p)
sol_SP1_gt = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid)
sol_SP1_gt_7min = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid_large)
prob =  ODEProblem(ode_system2!, u0[3,:], (tstart,tend), p)
sol_SP2_gt = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid)
sol_SP2_gt_7min = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid_large)
prob =  ODEProblem(ode_system2!, u0[4,:], (tstart,tend), p)
sol_SP3_gt = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid)
sol_SP3_gt_7min = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid_large)
prob =  ODEProblem(ode_system2!, u0[5,:], (tstart,tend), p)
sol_SP4_gt = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid)
sol_SP4_gt_7min = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid_large)

sol_SPN_trainingset1=sol_SPN_trainingset1

datasetsize=14
pred_EnMLP=[]
for i=1:datasetsize
    u0=[sol_SPN_trainingset1[i,1];sol_SPN_trainingset1[i,3:end];tgrid_opt[i]]
    p=ensemble_prediction(ensemble_MLP,u0)
    tstart=tgrid_opt[i]
    tend=tgrid_opt[i+1]

    prob =  ODEProblem(ode_system!, u0, (tstart,tend), p[1])
    sol = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid)
    push!(pred_EnMLP,sol[:,end])

end

pred_EnMLP=vcat(map(x->x', pred_EnMLP)...)


lws=2.5
gr( xtickfontsize=7, ytickfontsize=7, xguidefontsize=9, yguidefontsize=9, legendfontsize=6);
plots=plot(tgrid,sol_SPN_trainingset1,color=:blue , lw=lws, label = false, ylabel=["[Xv]" "[Xt]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,3),size = (800,700))
plot!(tgrid_opt[2:end],pred_EnMLP,color=:red , lw=lws, label = false, ylabel=["[Xv]" "[Xt]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,3),size = (800,700))
plot!(sol_SPN_gt.t,transpose(sol_SPN_gt),color=:cyan , lw=lws, label = false, ylabel=["[Xv]" "[Xt]"  "[GLC]" "[GLN]" "[LAC]" "[AMM]" "[mAb]"], layout=(3,3))
display(plots)
